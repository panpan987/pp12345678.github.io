<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于Spring的后台脚手架框架  若依&amp;人人开源</title>
      <link href="2021/03/26/%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9F%BA%E4%BA%8ESpring%E7%9A%84%E5%90%8E%E5%8F%B0%E8%84%9A%E6%89%8B%E6%9E%B6%E6%A1%86%E6%9E%B6-%E8%8B%A5%E4%BE%9D-%E4%BA%BA%E4%BA%BA%E5%BC%80%E6%BA%90/"/>
      <url>2021/03/26/%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9F%BA%E4%BA%8ESpring%E7%9A%84%E5%90%8E%E5%8F%B0%E8%84%9A%E6%89%8B%E6%9E%B6%E6%A1%86%E6%9E%B6-%E8%8B%A5%E4%BE%9D-%E4%BA%BA%E4%BA%BA%E5%BC%80%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>这两个框架都是开源的，基于Spring，本身就可以跑起来。不仅适合学习，更重要的是能在此基础上快速地开发企业级后台管理系统，官网说明文档写得很清晰。</p><p>若依官网：<a href="https://www.ruoyi.vip/">https://www.ruoyi.vip/</a></p><p>人人开源官网：<a href="https://www.renren.io/">https://www.renren.io/</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 若依&amp;人人开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MinIO服务如何配置加密访问</title>
      <link href="2021/03/21/MinIO%E6%9C%8D%E5%8A%A1%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE/"/>
      <url>2021/03/21/MinIO%E6%9C%8D%E5%8A%A1%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="从https引入了一个http的视频"><a href="#从https引入了一个http的视频" class="headerlink" title="从https引入了一个http的视频"></a>从https引入了一个http的视频</h1><ol><li>之前访问MinIO客户端页面走http协议<img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/MinIO%E6%9C%8D%E5%8A%A1%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE/image-20210321021216508-1616266036389-1616266044636-1616266112378.png" alt="image-20210321021216508"></li><li>在博客页面使用ip+端口的方式获取桶里面视频，加载不了。<img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/MinIO%E6%9C%8D%E5%8A%A1%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE/image-20210321021953887.png" alt="image-20210321021953887" style="zoom:67%;"> 博客页面是走https协议，发现加载的视频也是https协议，视频地址改成http是可以加载的。</li><li>对存储视频的Linux绑定域名后，通过域名+端口获取桶内视频还是加载不出来，F12显示</li></ol><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/MinIO%E6%9C%8D%E5%8A%A1%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE/image-20210321022109224.png" alt="image-20210321022109224"></p><h1 id="在MinIO中使用现有的密钥和证书"><a href="#在MinIO中使用现有的密钥和证书" class="headerlink" title="在MinIO中使用现有的密钥和证书"></a>在MinIO中使用现有的密钥和证书</h1><ol><li>为了解决上面的问题，从腾讯云域名解析那里SSL点进去下载证书，解压，进入Nginx，并改名：</li></ol><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/MinIO%E6%9C%8D%E5%8A%A1%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE/image-20210321022446563.png" alt="image-20210321022446563"></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/MinIO%E6%9C%8D%E5%8A%A1%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE/image-20210321022508537.png" alt="image-20210321022508537"></p><ol start="2"><li>上传到MinIO映射的宿主机配置文件下</li></ol><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/MinIO%E6%9C%8D%E5%8A%A1%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE/image-20210321022636118.png" alt="image-20210321022636118"></p><ol start="3"><li>重启Docker <code>systemctl restart docker</code>，或者重启MinIO容器</li><li>终于变成https <img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/MinIO%E6%9C%8D%E5%8A%A1%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE/image-20210321022918957.png" alt="image-20210321022918957"></li></ol><p>参考：<a href="https://docs.min.io/docs/how-to-secure-access-to-minio-server-with-tls">https://docs.min.io/docs/how-to-secure-access-to-minio-server-with-tls</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MinIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名加锁</title>
      <link href="2021/03/21/%E5%9F%9F%E5%90%8D%E5%8A%A0%E9%94%81/"/>
      <url>2021/03/21/%E5%9F%9F%E5%90%8D%E5%8A%A0%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h1><p>将域名解析到服务器的ip，并申请SSL（好像现在（2021-03）可以免费申请），这里以腾讯云举例。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/%E5%9F%9F%E5%90%8D%E5%8A%A0%E9%94%81/image-20210321012357547-1616266568662.png" alt="image-20210321012357547"></p><p>申请好之后下载证书 。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/%E5%9F%9F%E5%90%8D%E5%8A%A0%E9%94%81/image-20210321012756119.png" alt="image-20210321012756119"></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/%E5%9F%9F%E5%90%8D%E5%8A%A0%E9%94%81/image-20210321012858905.png" alt="image-20210321012858905"></p><h1 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h1><p>在Centos 7系统安装nginx，命令：<code>yum install -y epel-release &amp;&amp; yum install -y nginx</code></p><p>Linux系统上Nginx默认站点配置文件是<code>/etc/nginx/conf.d/</code>目录下的<code>default.conf</code>，进入<code>/etc/nginx/conf.d/</code>目录下 <code>ll</code>发现没有对应的<code>default.conf</code>，<code>touch default.conf</code>,再<code>vim default.conf</code>  复制以下内容先保存，等下再改…</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name xxxxx;  # 改成你的域名</span><br><span class="line">    rewrite ^(.*) https://$server_name$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl http2;</span><br><span class="line">    server_name xxxxx;</span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    # ssl配置</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3; # tls 1.3要求nginx 1.13.0及以上版本</span><br><span class="line">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">    ssl_prefer_server_ciphers off;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 1d;</span><br><span class="line">    ssl_session_tickets off;</span><br><span class="line">    ssl_certificate xxxxx; # 改成你的证书地址</span><br><span class="line">    ssl_certificate_key xxxx; # 改成证书密钥文件地址</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/xxxx.access.log;</span><br><span class="line">    error_log /var/log/nginx/xxx.error.log;</span><br><span class="line"></span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将刚才下载的证书解压并进入Nginx目录</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/%E5%9F%9F%E5%90%8D%E5%8A%A0%E9%94%81/image-20210321013808094.png" alt="image-20210321013808094"></p><p>将.crt文件和.key文件名改成域名（方便记忆，好像改成public和private合适点）</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/%E5%9F%9F%E5%90%8D%E5%8A%A0%E9%94%81/image-20210321013902005.png" alt="image-20210321013902005"></p><p>使用WinSCP<img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/%E5%9F%9F%E5%90%8D%E5%8A%A0%E9%94%81/image-20210321014102035.png" alt="image-20210321014102035">这个文件传输神器将Windows上的安全证书和KEY文件上传到Linux上，路径随意，比如：<img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/%E5%9F%9F%E5%90%8D%E5%8A%A0%E9%94%81/image-20210321014326504.png" alt="image-20210321014326504"></p><p>编辑上面那个default.conf</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 域名;  # 改成你的域名</span><br><span class="line">    rewrite ^(.*) https://$server_name$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl http2;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    # ssl配置</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3; # tls 1.3要求nginx 1.13.0及以上版本</span><br><span class="line">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">    ssl_prefer_server_ciphers off;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 1d;</span><br><span class="line">    ssl_session_tickets off;</span><br><span class="line">    ssl_certificate /etc/nginx/自定义的名字.crt; # 改成你的证书地址</span><br><span class="line">    ssl_certificate_key /etc/nginx/自定义的名字.key; # 改成证书密钥文件地址</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/xxxx.access.log;</span><br><span class="line">    error_log /var/log/nginx/xxx.error.log;</span><br><span class="line"></span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好用<code>nginx -t</code>命令查看有无错误，没问题的话<code>systemctl restart nginx</code>启动Nginx。打开浏览器在地址栏输入域名，直接看到CentOS的欢迎页。。。为什么不是nginx的欢迎页面呢？？？</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/21/%E5%9F%9F%E5%90%8D%E5%8A%A0%E9%94%81/image-20210321014948817.png" alt="image-20210321014948817"></p><p>上面内容大部分转载于：<a href="https://tlanyan.me/v2ray-traffic-mask/">https://tlanyan.me/v2ray-traffic-mask/</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MinIO的安装与使用</title>
      <link href="2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-MinIO简介"><a href="#1-MinIO简介" class="headerlink" title="1. MinIO简介"></a>1. MinIO简介</h1><ul><li>MinIO是高性能的对象存储服务器，它非常适合存储非结构化数据，如图片、视频、音频、Excel报表、日志文件等，单个文件大小可以从几KB到5TB。</li><li>MinIO服务器足够轻量，提供的图形化界面清爽。</li><li>图标是一只仙鹤，官网地址：<a href="https://min.io/">https://min.io/</a></li></ul><h1 id="2-安装和使用"><a href="#2-安装和使用" class="headerlink" title="2. 安装和使用"></a>2. 安装和使用</h1><p>这里使用Docker安装MinIO</p><h2 id="2-1-搜索镜像"><a href="#2-1-搜索镜像" class="headerlink" title="2.1 搜索镜像"></a>2.1 搜索镜像</h2><p>使用命令：<code>docker search minio</code></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20210320205453098.png" alt="image-20210320205453098"></p><p>选第一个STARTS最多的准没错…</p><h2 id="2-2-拉取镜像"><a href="#2-2-拉取镜像" class="headerlink" title="2.2 拉取镜像"></a>2.2 拉取镜像</h2><p>使用命令：<code>docker pull docker.io/minio/minio</code>    (说明：docker pull + 镜像的名字）</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20210320210053149.png" alt="image-20210320210053149"></p><h2 id="2-3-查看镜像"><a href="#2-3-查看镜像" class="headerlink" title="2.3 查看镜像"></a>2.3 查看镜像</h2><p>使用命令： <code>docker images</code> 这是查看所有的镜像信息，包括未运行的和已运行的</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20210320211425542.png" alt="image-20210320211425542"></p><p>上面是刚刚下载的镜像，对上面红色标注做一下解释：</p><ul><li>REPOSITORY：来自于哪个仓库；</li><li>TAG：镜像的标签，比如5.7、latest分别表示5.7版本、最新的版本；</li><li>IMAGE ID：镜像的ID，唯一的，如果两个ID完全相同，那么实际上它们指向同一镜像，只是标签名称不同；</li><li>CREATED：镜像最后的更新时间；</li><li>SIZE：镜像的大小，优秀的镜像一般体积都比较小；</li></ul><h2 id="2-4-运行镜像"><a href="#2-4-运行镜像" class="headerlink" title="2.4 运行镜像"></a>2.4 运行镜像</h2><p>运行镜像之后有了MinIO容器，镜像相当于类（Class），容器相当于实例（instance）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 9000:9000 --name minio \</span><br><span class="line">-d --restart=always \</span><br><span class="line">-e &quot;MINIO_ACCESS_KEY=自定义AK&quot; \</span><br><span class="line">-e &quot;MINIO_SECRET_KEY=自定义SK&quot; \</span><br><span class="line">-v /home/data:/data \</span><br><span class="line">-v /home/config:/root/.minio \</span><br><span class="line">minio/minio server /data</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>-p 9000:9000</code> 将宿主机（Linux系统）9000端口映射到MinIO容器 9000端口，通过访问宿主机的 ip:9000就访问到MinIO服务</li><li><code>-d --restart=always</code> Docker重启后容器也会重启</li><li><code>-e &quot;MINIO_ACCESS_KEY=自定义AK&quot;</code> <code>-e &quot;MINIO_SECRET_KEY=自定义SK&quot; \</code> AK和SK，相当于用户名和密码，访问MinIO服务必须需要这两个KEY</li><li><code>-v /home/data:/data</code> <code>-v /home/config:/root/.minio</code> 将宿主机上的数据、配置目录与容器内目录相映射</li></ul><h2 id="2-5-查看容器运行情况"><a href="#2-5-查看容器运行情况" class="headerlink" title="2.5 查看容器运行情况"></a>2.5 查看容器运行情况</h2><p>使用命令 <code>docker ps -a</code></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20210320221020677.png" alt="image-20210320221020677"></p><p>需要查看STATUS，有Up…表示运行着，如果是Exit..表示未运行</p><h2 id="2-6-查看安装logs信息"><a href="#2-6-查看安装logs信息" class="headerlink" title="2.6 查看安装logs信息"></a>2.6 查看安装logs信息</h2><p>命令 <code>docker logs 6189eedfc191</code>  （docker logs + CONTAINER ID）</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20210320221624504.png" alt="image-20210320221624504"></p><h2 id="2-7-登录客户端"><a href="#2-7-登录客户端" class="headerlink" title="2.7 登录客户端"></a>2.7 登录客户端</h2><p>浏览器输入Linux的ip+端口，如101.xx.xx.xx:9000</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20210320223324364.png" alt="image-20210320223324364"></p><p>输入刚才自定义的AK和SK，进入图形化界面</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20210320224334850.png" alt="image-20210320224334850"></p><h2 id="2-8-创建桶"><a href="#2-8-创建桶" class="headerlink" title="2.8 创建桶"></a>2.8 创建桶</h2><p>文件存储在桶内，桶可以认为是文件夹。MinIO桶名称(bucket name)命名不支持下划线，支持中划线。</p><p>点击右下角+号创建桶</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20210320224925983.png" alt="image-20210320224925983"></p><h2 id="2-9-存储数据"><a href="#2-9-存储数据" class="headerlink" title="2.9 存储数据"></a>2.9 存储数据</h2><p>现在就能轻松愉快地存储数据了，可以直接在浏览器中往桶内存数据，也可以通过MinIO提供的SDK，如通过Java客户端API调用，参考：<a href="https://docs.min.io/docs/java-client-api-reference.html">https://docs.min.io/docs/java-client-api-reference.html</a></p><h3 id="2-9-1-使用浏览器存"><a href="#2-9-1-使用浏览器存" class="headerlink" title="2.9.1 使用浏览器存"></a>2.9.1 使用浏览器存</h3><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20210320230816655.png" alt="image-20210320230816655"></p><h3 id="2-9-2-使用Java、Go存"><a href="#2-9-2-使用Java、Go存" class="headerlink" title="2.9.2 使用Java、Go存"></a>2.9.2 使用Java、Go存</h3><p>// TODO</p><h2 id="2-10-访问数据"><a href="#2-10-访问数据" class="headerlink" title="2.10 访问数据"></a>2.10 访问数据</h2><p>默认情况下，MinIO在没有配置bucket策略时是没有读写权限的，需要如下操作：</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20210320231659940.png" alt="image-20210320231659940"></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20210320231726228.png" alt="image-20210320231726228"></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/20/MinIO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/image-20210320232051796.png" alt="image-20210320232051796"></p><p>然后就可以通过<code>ip:端口/桶名/文件名</code> 访问~</p><p>如：101.xx.xx.xx:9000/my-video/adultvideo.mp4</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MinIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百钱百鸡</title>
      <link href="2021/03/20/%E7%99%BE%E9%92%B1%E7%99%BE%E9%B8%A1/"/>
      <url>2021/03/20/%E7%99%BE%E9%92%B1%E7%99%BE%E9%B8%A1/</url>
      
        <content type="html"><![CDATA[<p>古代数学家<a href="https://baike.baidu.com/item/%E5%BC%A0%E4%B8%98%E5%BB%BA/10246238">张丘建</a>在《算经》一书中提出著名的“百钱白鸡”问题：一只公鸡值五钱，一只母鸡值三钱，三只小鸡值一钱，现在要用百钱买百鸡，请问公鸡、母鸡、小鸡各多少只？</p><p>分析：如果用一百钱只买一种鸡，那么公鸡最多20只，母鸡最多33只，小鸡最多300只。但题目要求只买100只，所以小鸡在0-100之间，母鸡在0-33之间，公鸡在0-20之间。公鸡、母鸡、小鸡个数分别用cock、hen、100-cock-hen表示。假设一钱不能再找零了，则小鸡应为3的倍数，则：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> cock := <span class="number">0</span>; cock &lt;= <span class="number">20</span>; cock++ &#123;</span><br><span class="line">    <span class="keyword">for</span> hen := <span class="number">0</span>; hen &lt;= <span class="number">33</span>; hen++ &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="number">100</span>-cock-hen)%<span class="number">3</span> == <span class="number">0</span> &amp;&amp; cock*<span class="number">5</span>+hen*<span class="number">3</span>+(<span class="number">100</span>-cock-hen)/<span class="number">3</span> == <span class="number">100</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;公鸡:%d 母鸡:%d 小鸡:%d\n&quot;</span>, cock, hen, <span class="number">100</span>-cock-hen)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">公鸡:0 母鸡:25 小鸡:75</span><br><span class="line">公鸡:4 母鸡:18 小鸡:78</span><br><span class="line">公鸡:8 母鸡:11 小鸡:81</span><br><span class="line">公鸡:12 母鸡:4 小鸡:84</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏作弊引擎 Cheat Engine</title>
      <link href="2021/03/20/%E6%B8%B8%E6%88%8F%E4%BD%9C%E5%BC%8A%E5%BC%95%E6%93%8E-Cheat-Engine/"/>
      <url>2021/03/20/%E6%B8%B8%E6%88%8F%E4%BD%9C%E5%BC%8A%E5%BC%95%E6%93%8E-Cheat-Engine/</url>
      
        <content type="html"><![CDATA[<p>Cheat Engine（CE）是一款旨在帮助您在没有互联网连接的情况下修改单人游戏的工具，因此您可以根据自己的喜好使其变得更难或更轻松（<font color="red">例如：发现100HP太容易了，请尝试玩最大1HP的游戏</font>） ，还包含其他有用的工具来帮助调试游戏甚至普通的应用程序，并通过让您通过后门检查内存修改来帮助保护您的系统，甚至还提供了一些将它们与常规手段隐藏起来的方法。</p><p>它带有内存扫描仪，可以快速扫描游戏中使用的变量并允许您对其进行更改，但是它还带有调试器，反汇编程序，汇编程序，speedhack，trainer maker，direct 3D操作工具，系统检查工具等等……对普通程序员和软件分析师也很有用。</p><p>上述文字机翻自CE官网：<a href="https://www.cheatengine.org/">https://www.cheatengine.org/</a></p><p>PS：看到有对《植物大战僵尸》做修改的，游戏开始时，修改阳光值到10000，再也不需要点阳光了，完全变成了养僵尸的游戏&gt;_&lt;</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/20/%E6%B8%B8%E6%88%8F%E4%BD%9C%E5%BC%8A%E5%BC%95%E6%93%8E-Cheat-Engine/image-20210320110147171.png" alt="image-20210320110147171"></p>]]></content>
      
      
      <categories>
          
          <category> Candy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cheat Engine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么在CentOS上安装Docker</title>
      <link href="2021/03/19/%E6%80%8E%E4%B9%88%E5%9C%A8CentOS%E4%B8%8A%E5%AE%89%E8%A3%85Docker/"/>
      <url>2021/03/19/%E6%80%8E%E4%B9%88%E5%9C%A8CentOS%E4%B8%8A%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>查看liunx版本，Docker官方说建议3.10以上</p><p>可以通过命令 <code>uname -r</code> 查看，如CentOS 7.7 64位，内核版本：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-6-centos ~]# uname -r</span><br><span class="line">3.10.0-1062.18.1.el7.x86_64</span><br></pre></td></tr></table></figure><p>若之前安装了Docker，再次安装之前先清理，命令：</p><p><code>sudo yum remove -y docker \                   docker-client \                   docker-client-latest \                   docker-common \                   docker-latest \                   docker-latest-logrotate \                   docker-logrotate \                   docker-selinux \                   docker-engine-selinux \                   docker-engine</code></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>CentOS7 系统 CentOS-Extras 库中已带 Docker，可以直接安装：<code>sudo yum install -y docker</code>  其中<code>sudo</code>（Super User do）表示以管理员的身份运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-6-centos ~]# sudo yum install -y docker</span><br></pre></td></tr></table></figure><p>等待安装…看到Complete!就好了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Dependency Updated:</span><br><span class="line">  policycoreutils.x86_64 0:2.5-34.el7                                                                   </span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><h1 id="启动、重启、关闭"><a href="#启动、重启、关闭" class="headerlink" title="启动、重启、关闭"></a>启动、重启、关闭</h1><ul><li><font color="blue">蓝色</font>代表CentOS 7.x的命令</li><li><font color="purple">紫色</font>代表CentOS 6.x的命令</li></ul><h3 id="Docker启动"><a href="#Docker启动" class="headerlink" title="Docker启动"></a>Docker启动</h3><ul><li><font color="blue">systemctl start docker</font></li><li><font color="purple">service docker start</font></li></ul><h3 id="Docker重启"><a href="#Docker重启" class="headerlink" title="Docker重启"></a>Docker重启</h3><ul><li><font color="blue">systemctl restart docker</font></li><li><font color="purple">service docker restart</font></li></ul><h3 id="Docker关闭"><a href="#Docker关闭" class="headerlink" title="Docker关闭"></a>Docker关闭</h3><ul><li><font color="blue">systemctl stop docker </font></li><li><font color="purple">service docker stop</font></li></ul><h3 id="查看是否启动成功"><a href="#查看是否启动成功" class="headerlink" title="查看是否启动成功"></a>查看是否启动成功</h3><ul><li>docker ps -a</li></ul><p>若启动成功，则显示以下内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-6-centos ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE          COMMAND        CREATED      STATUS        PORTS        NAMES</span><br></pre></td></tr></table></figure><p>若没有启动，则显示以下内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-6-centos ~]# docker ps -a</span><br><span class="line">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br></pre></td></tr></table></figure><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><ul><li>systemctl enable docker</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-6-centos ~]# systemctl enable docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="查看Docker版本"><a href="#查看Docker版本" class="headerlink" title="查看Docker版本"></a>查看Docker版本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-6-centos ~]# docker --version</span><br><span class="line">Docker version 1.13.1, build 0be3e21/1.13.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go有哪些web框架</title>
      <link href="2021/03/17/Go%E6%9C%89%E5%93%AA%E4%BA%9Bweb%E6%A1%86%E6%9E%B6/"/>
      <url>2021/03/17/Go%E6%9C%89%E5%93%AA%E4%BA%9Bweb%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p> 其实golang提供的net/http库已经很好了，对于http的协议的实现非常好。框架一直是敏捷开发中的利器，能让开发者很快的上手并做出应用，因此大牛们开发了Go的web框架。</p><ul><li><p>Beego</p><p>Beego是一款MVC框架，提供了Restful功能，同时热编译、自动化测试代码以及自动化打包部署都是它受到人们追捧的特点。Beego框架的中文文档相当丰富，同时它的社区也非常活跃。</p><p>官网：<a href="https://beego.me/">https://beego.me</a></p><p>github仓库：<a href="https://github.com/beego/beego">https://github.com/beego/beego</a></p><p>Star：26k    （2021-03-17）</p></li><li><p>Gin</p><p>Gin是一个golang的微框架，封装比较优雅，API友好，源码注释比较明确。具有快速灵活，容错方便等特点。</p><p>github仓库：<a href="https://github.com/gin-gonic/gin">https://github.com/gin-gonic/gin</a></p><p>Star：46.5k    （2021-03-17）    </p></li><li><p>Echo</p><p>简约的高性能 Go 语言 Web 框架。</p><p>github仓库：<a href="https://github.com/labstack/echo">https://github.com/labstack/echo</a></p><p>Star：19.4k    （2021-03-17）</p></li><li><p>Iris</p><p>号称全宇宙最快的 Go 语言 Web 框架。完备 MVC 支持。</p><p>github仓库：<a href="https://github.com/kataras/iris">https://github.com/kataras/iris</a></p><p>Star：20.2k    （2021-03-17）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费又好用的CDN之jsDelivr</title>
      <link href="2021/03/14/%E5%85%8D%E8%B4%B9%E5%8F%88%E5%A5%BD%E7%94%A8%E7%9A%84CDN-jsDelivr/"/>
      <url>2021/03/14/%E5%85%8D%E8%B4%B9%E5%8F%88%E5%A5%BD%E7%94%A8%E7%9A%84CDN-jsDelivr/</url>
      
        <content type="html"><![CDATA[<p> 官网：<a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/03/14/%E5%85%8D%E8%B4%B9%E5%8F%88%E5%A5%BD%E7%94%A8%E7%9A%84CDN-jsDelivr/image-20210314222256066.png" alt="image-20210314222256066"></p><p>这个CDN能很好地给GitHub上的资源加速，可谓是非常好用的神器之一。</p><p>jsDelivr提供了NPM、GitHub、WordPress这三个直观例子，有兴趣的道友可以去进一步了解。</p><p>其中加速GitHub资源的方法是：</p><p><code>https://cdn.jsdelivr.net/gh/用户名称/仓库名称@分支名/目录(没有目录可不写)/文件名</code></p><p>使用之后，发现页面的加载速度嗖嗖嗖的提升了，有木有单车变摩托的感觉。</p>]]></content>
      
      
      <categories>
          
          <category> Candy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang从入门到放弃10</title>
      <link href="2021/03/14/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8310/"/>
      <url>2021/03/14/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8310/</url>
      
        <content type="html"><![CDATA[<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p>​    使用关键字go开启轻量级线程goroutine（协程）</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">go</span> ping2()</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;pong...&quot;</span>)</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 等待两个循环跑完</span></span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    time.Sleep(<span class="number">100</span> * time.Second)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ping2</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;ping...&quot;</span>)</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pong...</span><br><span class="line">ping...</span><br><span class="line">ping...</span><br><span class="line">pong...</span><br><span class="line">ping...</span><br><span class="line">pong...</span><br><span class="line">pong...</span><br><span class="line">ping...</span><br><span class="line">ping...</span><br><span class="line">pong...</span><br></pre></td></tr></table></figure><h1 id="通道（channel）"><a href="#通道（channel）" class="headerlink" title="通道（channel）"></a>通道（channel）</h1><p>​    用于goroutine之间传递数据</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 声明通道</span></span><br><span class="line">  ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">  <span class="comment">// 把1写到通道中</span></span><br><span class="line">  ch &lt;- <span class="number">1</span></span><br><span class="line">  <span class="comment">// 从通道中读取数据赋值给x</span></span><br><span class="line">  x := &lt;-ch</span><br><span class="line">  fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br><span class="line"></span><br><span class="line">goroutine 1 [chan send]:</span><br><span class="line">main.main()</span><br><span class="line">E:/GoCode/test0/main.go:9 +0x65</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 2</span><br></pre></td></tr></table></figure><p>最近在学channel老是发生这个死锁错误。百度了一下，发现对于开辟的无缓冲区的通道，当往通道写入数据时，会一直阻塞等到某个协程对这个缓冲通道读。main函数本身就是一个协程的执行，这里相当于在main函数里往通道里写了一个1，然后main函数阻塞了，下面的这句<code>x := &lt;-ch</code>只是main这个协程的语句，需要等到其他协程读取了数据，才能不再阻塞。</p><p>解决方法：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 声明通道</span></span><br><span class="line">  ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">  <span class="comment">// main函数执行完之前关闭通道</span></span><br><span class="line">  <span class="keyword">defer</span> <span class="built_in">close</span>(ch)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把1写到通道中</span></span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch &lt;- <span class="number">1</span></span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从通道中读取数据赋值给</span></span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := &lt;-ch</span><br><span class="line">    fmt.Println(x)</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang从入门到放弃09</title>
      <link href="2021/03/03/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8309/"/>
      <url>2021/03/03/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8309/</url>
      
        <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口<span id="more"></span></h1><p>接口定义方法名、传参、返回值，并未实现，其他方法只要实现这些方法就实现了这个接口。</p><p>接口使得Go语言也具有面向对象的特征。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Car接口</span></span><br><span class="line"><span class="keyword">type</span> Car <span class="keyword">interface</span> &#123;</span><br><span class="line">  autoDrive()</span><br><span class="line">  playMusic()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类型的车,只要该类型实现了所有Car接口的方法，该类型就是Car的子类</span></span><br><span class="line"><span class="keyword">type</span> WuLingHongGuang <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义另一个类型的车</span></span><br><span class="line"><span class="keyword">type</span> Car86 <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (wl wuLingHongGuang)表示wuLingHongGuang这个类型可以调用这个方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wl WuLingHongGuang)</span> <span class="title">autoDrive</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;开启自动驾驶&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wl WuLingHongGuang)</span> <span class="title">playMusic</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;注意，开始放音乐了&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(car86 Car86)</span> <span class="title">autoDrive</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;闪电漂移&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(car86 Car86)</span> <span class="title">playMusic</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;播放逮虾户&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 声明接口变量</span></span><br><span class="line">  <span class="keyword">var</span> car Car</span><br><span class="line">  <span class="comment">// 把实现类型赋值给接口变量</span></span><br><span class="line">  car = <span class="built_in">new</span>(WuLingHongGuang)</span><br><span class="line">  <span class="comment">// 调用接口的方法，实际运行的是实现类型所实现的方法</span></span><br><span class="line">  car.autoDrive()</span><br><span class="line">  car.playMusic()</span><br><span class="line"></span><br><span class="line">  car = <span class="built_in">new</span>(Car86)</span><br><span class="line">  car.autoDrive()</span><br><span class="line">  car.playMusic()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">开启自动驾驶</span><br><span class="line">注意，开始放音乐了</span><br><span class="line">闪电漂移</span><br><span class="line">播放逮虾户</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang从入门到放弃08</title>
      <link href="2021/03/01/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8308/"/>
      <url>2021/03/01/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8308/</url>
      
        <content type="html"><![CDATA[<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体<span id="more"></span></h1><p>结构体是自定义类型，比如学生有姓名，年龄，学号等，则：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义了学生这个结构体</span></span><br><span class="line"><span class="keyword">type</span> Students <span class="keyword">struct</span> &#123;</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">  age  <span class="keyword">int</span></span><br><span class="line">  id   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 直接按照顺序写</span></span><br><span class="line">  stu1 := Students&#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="number">23</span>, <span class="string">&quot;003&quot;</span>&#125;</span><br><span class="line">  <span class="comment">// 也可以使用key -&gt; value 格式</span></span><br><span class="line">  stu2 := Students&#123;name: <span class="string">&quot;lisi&quot;</span>, age: <span class="number">24</span>, id: <span class="string">&quot;004&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(stu1)</span><br><span class="line">  fmt.Println(stu2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;zhangsan 23 003&#125;</span><br><span class="line">&#123;lisi 24 004&#125;</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h1 id="Map（集合）"><a href="#Map（集合）" class="headerlink" title="Map（集合）"></a>Map（集合）</h1><p>Map是一种存储数据的方式之一，使用key：value 键值对形式，光说无意，看代码比较直观</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 定义map，使用make函数，map的值为string,key为int</span></span><br><span class="line">  nvShenMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 赋值</span></span><br><span class="line">  nvShenMap[<span class="string">&quot;杨超越&quot;</span>] = <span class="number">17</span></span><br><span class="line">  nvShenMap[<span class="string">&quot;陈都灵&quot;</span>] = <span class="number">16</span></span><br><span class="line">  nvShenMap[<span class="string">&quot;迪丽热巴&quot;</span>] = <span class="number">18</span></span><br><span class="line">  nvShenMap[<span class="string">&quot;苏菲玛索&quot;</span>] = <span class="number">19</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用for...range遍历</span></span><br><span class="line">  <span class="keyword">for</span> key,value := <span class="keyword">range</span> nvShenMap &#123;</span><br><span class="line">    fmt.Println(key,value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">杨超越 17</span><br><span class="line">陈都灵 16</span><br><span class="line">迪丽热巴 18</span><br><span class="line">苏菲玛索 19</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好看的悬疑推理类电影</title>
      <link href="2021/02/28/%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%82%AC%E7%96%91%E6%8E%A8%E7%90%86%E7%B1%BB%E7%94%B5%E5%BD%B1/"/>
      <url>2021/02/28/%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%82%AC%E7%96%91%E6%8E%A8%E7%90%86%E7%B1%BB%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="穆赫兰道"><a href="#穆赫兰道" class="headerlink" title="穆赫兰道"></a>穆赫兰道<span id="more"></span></h1><p>好莱坞的穆赫兰道上，一个名叫丽塔<em>（</em><a href="https://baike.baidu.com/item/%E5%8A%B3%E6%8B%89%C2%B7%E5%93%88%E7%81%B5/5502487"><em>劳拉·哈灵</em></a> <em>饰）</em>的女人遇上了一场车祸。车祸中的另外两个看上去显然不怎么正经的男人当场丧命，但丽塔幸运地死里逃生。但是她完全失忆了，甚至连自己的名字也无法记起。她从车里爬出来，跌跌撞撞地来到一座公寓，藏身于公寓外的灌木丛中。下图是导演大卫芬奇在指导演员。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/28/%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%82%AC%E7%96%91%E6%8E%A8%E7%90%86%E7%B1%BB%E7%94%B5%E5%BD%B1/muhelandao.jpg" alt="img"></p><h1 id="恐怖游轮"><a href="#恐怖游轮" class="headerlink" title="恐怖游轮"></a>恐怖游轮</h1><p>单亲母亲杰西（<a href="https://baike.baidu.com/item/%E6%A2%85%E5%88%A9%E8%8E%8E%C2%B7%E4%B9%94%E6%B2%BB">梅利莎·乔治</a>饰）和一帮朋友乘游艇出海游玩，但她总有一种有不好的事情发生的感觉。不久，他们便在海上遭遇一场强烈的风暴。游艇翻船，众人落海，几经挣扎他们好不容易爬到游艇残骸上来。正当他们无计可施之时，一艘巨大的游轮向众人缓缓驶来。众人欣喜过望，未加思索便登上这艘名为“<a href="https://baike.baidu.com/item/%E8%89%BE%E4%BF%84%E6%B4%9B%E6%96%AF">艾俄洛斯</a>”的游轮，结果发现这竟是一艘1930年便告失踪的神秘之船，而船上更是空无一人。随处可见的鲜血、神秘的指示以及突如其来的凶杀事件，将这群男女带入万劫不复的恐怖轮回之中。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/28/%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%82%AC%E7%96%91%E6%8E%A8%E7%90%86%E7%B1%BB%E7%94%B5%E5%BD%B1/kongbuyoulun.jpg" alt="img"></p><h1 id="七宗罪"><a href="#七宗罪" class="headerlink" title="七宗罪"></a>七宗罪</h1><p>《七宗罪》由布拉德·皮特、摩根·弗里曼、格温妮丝·帕特洛、凯文·史派西等人主演的惊悚悬疑片。和《穆赫兰道》一样也是大卫芬奇执导。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/28/%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%82%AC%E7%96%91%E6%8E%A8%E7%90%86%E7%B1%BB%E7%94%B5%E5%BD%B1/qicongzui.jpg" alt="img"></p><h1 id="致命ID"><a href="#致命ID" class="headerlink" title="致命ID"></a>致命ID</h1><p>在一个漆黑的夜晚，一片无边无际的沙漠荒原，一场肆虐的暴风雨，将矗立在其中的一座汽车旅馆与外界完全隔离，道路不通，通讯中断。</p><p>11个此前相互完全不了解的陌生人，被迫聚集在这个摇摇欲坠的破汽车旅馆中。这11个人被分在了不同的房间，他们都拿着带有号码的房间钥匙。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/28/%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%82%AC%E7%96%91%E6%8E%A8%E7%90%86%E7%B1%BB%E7%94%B5%E5%BD%B1/zhimingid.jpg" alt="img"></p><h1 id="迷雾"><a href="#迷雾" class="headerlink" title="迷雾"></a>迷雾</h1><p>由曾经导演过《肖申克的救赎》的弗兰克.达拉邦导演并改编自著名恐怖小说家史蒂芬.金的小说，讲述了一个小镇忽然被一阵来路不明的大雾笼罩，那雾中似乎有什么神秘的东西，主人公大卫·德雷顿与儿子领着一小拨人，退避到一家超市中……</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/28/%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%82%AC%E7%96%91%E6%8E%A8%E7%90%86%E7%B1%BB%E7%94%B5%E5%BD%B1/miwu.jpg" alt="img"></p><h1 id="记忆碎片"><a href="#记忆碎片" class="headerlink" title="记忆碎片"></a>记忆碎片</h1><p>当记忆支离破碎后，你该怎样面对生活？本片的主人公就遭遇了这样的事情。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/28/%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%82%AC%E7%96%91%E6%8E%A8%E7%90%86%E7%B1%BB%E7%94%B5%E5%BD%B1/jiyisuipian.jpg" alt="img"></p><h1 id="万能钥匙"><a href="#万能钥匙" class="headerlink" title="万能钥匙"></a>万能钥匙</h1><p>该片讲述了护士卡罗琳去一个僻远而古旧的房子里照顾房子男主人却被卷入一连串的阴谋的故事。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/28/%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%82%AC%E7%96%91%E6%8E%A8%E7%90%86%E7%B1%BB%E7%94%B5%E5%BD%B1/wannengyoushi.jpg" alt="img"></p><h1 id="禁闭岛"><a href="#禁闭岛" class="headerlink" title="禁闭岛"></a>禁闭岛</h1><p>《禁闭岛》讲述了联邦侦探泰德·丹尼尔受命到一座岛上，却因此遇到了重重危险和谜团的故事。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/28/%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%82%AC%E7%96%91%E6%8E%A8%E7%90%86%E7%B1%BB%E7%94%B5%E5%BD%B1/jinbidao.jpg" alt="img"></p><h1 id="盗梦空间"><a href="#盗梦空间" class="headerlink" title="盗梦空间"></a>盗梦空间</h1><p>影片讲述由<a href="https://baike.baidu.com/item/%E8%8E%B1%E6%98%82%E7%BA%B3%E5%A4%9A%C2%B7%E8%BF%AA%E5%8D%A1%E6%99%AE%E9%87%8C%E5%A5%A5/1243185">莱昂纳多·迪卡普里奥</a>扮演的<a href="https://baike.baidu.com/item/%E9%80%A0%E6%A2%A6%E5%B8%88/16966844">造梦师</a>，带领<a href="https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4%AB%C2%B7%E9%AB%98%E7%99%BB-%E8%8E%B1%E7%BB%B4%E7%89%B9">约瑟夫·高登-莱维特</a>、<a href="https://baike.baidu.com/item/%E8%89%BE%E4%BC%A6%C2%B7%E4%BD%A9%E5%90%89/1268855">艾伦·佩吉</a><a href="https://baike.baidu.com/item/%E6%89%AE%E6%BC%94/3856018">扮演</a>的特工团队，进入他人梦境，从他人的潜意识中盗取机密，并重塑他人梦境的故事。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/28/%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%82%AC%E7%96%91%E6%8E%A8%E7%90%86%E7%B1%BB%E7%94%B5%E5%BD%B1/daomengkongjian.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 影视 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影视 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang从入门到放弃07</title>
      <link href="2021/02/27/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8307/"/>
      <url>2021/02/27/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8307/</url>
      
        <content type="html"><![CDATA[<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片<span id="more"></span></h1><p>因为数组的长度是固定不可改变，所以引入了切片（可以认为是动态数组），长度不固定，可以往里面追加元素。</p><h2 id="初始化切片"><a href="#初始化切片" class="headerlink" title="初始化切片"></a>初始化切片</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 初始化数组</span></span><br><span class="line">  <span class="comment">// [3]表示初始化长度为3的数组</span></span><br><span class="line">  a0 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">  <span class="comment">// 初始化切片有两种方式</span></span><br><span class="line">  <span class="comment">// 一、使用[]初始化切片，区别于初始化数组这里[]内什么也不写</span></span><br><span class="line">  s0 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">  <span class="comment">// 二、使用make()函数初始化长度为5，存int值的切片</span></span><br><span class="line">  s1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">  fmt.Printf(<span class="string">&quot;a0的类型是：%T\n&quot;</span>, a0)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;s0的类型是：%T\n&quot;</span>, s0)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;s1的类型是：%T\n&quot;</span>, s1)</span><br><span class="line"></span><br><span class="line">  fmt.Println(a0)</span><br><span class="line">  fmt.Println(s0)</span><br><span class="line">  fmt.Println(s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a0的类型是：[3]int</span><br><span class="line">s0的类型是：[]int</span><br><span class="line">s1的类型是：[]int</span><br><span class="line">[1 2 3]</span><br><span class="line">[1 2 3]</span><br><span class="line">[0 0 0 0 0]</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h2 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h2><h3 id="len-和cap-函数"><a href="#len-和cap-函数" class="headerlink" title="len()和cap()函数"></a>len()和cap()函数</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 使用make()初始化长度为5，容量为10的存int的切片</span></span><br><span class="line">  slice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice), slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">len=5 <span class="built_in">cap</span>=10 slice=[0 0 0 0 0]</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h2 id="append-和-copy-函数、空切片"><a href="#append-和-copy-函数、空切片" class="headerlink" title="append() 和 copy() 函数、空切片"></a>append() 和 copy() 函数、空切片</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 使用make()初始化长度为5，容量为10的存int的切片</span></span><br><span class="line">  slice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">  printSlice(slice)</span><br><span class="line">  <span class="comment">// 往切片中追加元素20，此时长度为6，为超过容量10，不扩容</span></span><br><span class="line">  slice = <span class="built_in">append</span>(slice, <span class="number">20</span>)</span><br><span class="line">  printSlice(slice)</span><br><span class="line">  <span class="comment">// 在上面切片的基础上，继续添加以下7个元素，此时长度为13，容量扩容为之前的两倍，10-&gt;20,</span></span><br><span class="line">  slice = <span class="built_in">append</span>(slice, <span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>)</span><br><span class="line">  printSlice(slice)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印切片长度、容量、值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">len=5 <span class="built_in">cap</span>=10 slice=[0 0 0 0 0]</span><br><span class="line">len=6 <span class="built_in">cap</span>=10 slice=[0 0 0 0 0 20]</span><br><span class="line">len=13 <span class="built_in">cap</span>=20 slice=[0 0 0 0 0 20 30 40 50 60 70 80 90]</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 声明切片并未初始化</span></span><br><span class="line">  <span class="keyword">var</span> slices []<span class="keyword">int</span></span><br><span class="line">  printSlice(slices)</span><br><span class="line">  <span class="keyword">if</span> slices == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;sleces是个空切片&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  slices = <span class="built_in">append</span>(slices, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">55</span>, <span class="number">5</span>)</span><br><span class="line">  <span class="comment">// 因为往slices里追加了元素，下面if不成立</span></span><br><span class="line">  <span class="keyword">if</span> slices == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;sleces还是个空切片&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  printSlice(slices)</span><br><span class="line">  <span class="comment">// 声明另一个空切片</span></span><br><span class="line">  <span class="keyword">var</span> copySlices []<span class="keyword">int</span></span><br><span class="line">  <span class="comment">// 往里面拷贝</span></span><br><span class="line">  <span class="built_in">copy</span>(copySlices, slices)</span><br><span class="line">  <span class="comment">// 此时打印为[],看来需要手动指定长度</span></span><br><span class="line">  fmt.Println(copySlices)</span><br><span class="line">  <span class="comment">// 指定和原切片长度相等</span></span><br><span class="line">  copySlices = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(slices))</span><br><span class="line">  <span class="comment">// 再往里面拷贝</span></span><br><span class="line">  <span class="built_in">copy</span>(copySlices, slices)</span><br><span class="line">  fmt.Println(copySlices)</span><br><span class="line">  printSlice(copySlices)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印切片长度、容量、值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">len=0 <span class="built_in">cap</span>=0 slice=[]</span><br><span class="line">sleces是个空切片</span><br><span class="line">len=5 <span class="built_in">cap</span>=6 slice=[1 3 5 55 5]</span><br><span class="line">[]</span><br><span class="line">[1 3 5 55 5]</span><br><span class="line">len=5 <span class="built_in">cap</span>=5 slice=[1 3 5 55 5]</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h3 id="切片截取"><a href="#切片截取" class="headerlink" title="切片截取"></a>切片截取</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 创建数组</span></span><br><span class="line">  numbers := [<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">54</span>, <span class="number">56</span>, <span class="number">61</span>, <span class="number">59</span>, <span class="number">45</span>, <span class="number">43</span>, <span class="number">13</span>, <span class="number">49</span>, <span class="number">73</span>, <span class="number">34</span>&#125;</span><br><span class="line">  <span class="comment">// [:]表示从数组中截取整段，生成切片赋值给slices0</span></span><br><span class="line">  slices0 := numbers[:]</span><br><span class="line">  printSlice(slices0)</span><br><span class="line">  <span class="comment">// [:3]表示从数组开始索引截取到索引为3的前一个元素</span></span><br><span class="line">  slices1 := numbers[:<span class="number">3</span>]</span><br><span class="line">  printSlice(slices1)</span><br><span class="line">  <span class="comment">// [1:]表示从数组索引为1的元素截取到末尾元素</span></span><br><span class="line">  slices2 := numbers[<span class="number">1</span>:]</span><br><span class="line">  printSlice(slices2)</span><br><span class="line">  <span class="comment">// [3:5]表示从数组索引为3的元素截取到索引为5的前一个元素（截取:两边的数字是包头不包尾）</span></span><br><span class="line">  slices3 := numbers[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line">  printSlice(slices3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印切片长度、容量、值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">len=10 <span class="built_in">cap</span>=10 slice=[54 56 61 59 45 43 13 49 73 34]</span><br><span class="line">len=3 <span class="built_in">cap</span>=10 slice=[54 56 61]</span><br><span class="line">len=9 <span class="built_in">cap</span>=9 slice=[56 61 59 45 43 13 49 73 34]</span><br><span class="line">len=2 <span class="built_in">cap</span>=7 slice=[59 45]</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang从入门到放弃06</title>
      <link href="2021/02/27/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8306/"/>
      <url>2021/02/27/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8306/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组<span id="more"></span></h1><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/27/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8306/image-20210227232045086.png" alt="image-20210227232045086"></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的三种初始化方式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 定义长度为5的存储int类型的数组</span></span><br><span class="line">  arrayA := [<span class="number">5</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 定义长度为5的存储int类型的数组并初始化</span></span><br><span class="line">  arrayB := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">  <span class="comment">// 定义长度不确定的存储int类型的数组并初始化，编译器会根据元素个数自行推断数组的长度</span></span><br><span class="line">  arrayC := [...]<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>&#125;</span><br><span class="line">  fmt.Println(arrayA)</span><br><span class="line">  fmt.Println(arrayB)</span><br><span class="line">  fmt.Println(arrayC)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[0 0 0 0 0]</span><br><span class="line">[1 3 5 7 9]</span><br><span class="line">[2 4 6 8 10 12 14 16]</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组索引</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  arrayB := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">  <span class="comment">// 通过索引访问数组内元素</span></span><br><span class="line">  value := arrayB[<span class="number">1</span>]</span><br><span class="line">  fmt.Println(value)</span><br><span class="line">  <span class="comment">// 修改对应索引处元素的值</span></span><br><span class="line">  arrayB[<span class="number">4</span>] = <span class="number">999</span></span><br><span class="line">  fmt.Println(arrayB)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">[1 3 5 7 999]</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang从入门到放弃05</title>
      <link href="2021/02/27/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8305/"/>
      <url>2021/02/27/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8305/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数<span id="more"></span></h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main函数，程序的入口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 调用add函数,传两个参数1,1</span></span><br><span class="line">  sum := add(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">  fmt.Println(sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数名为add，它接收两个参数，都为int类型，并返回int类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="keyword">int</span>, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang从入门到放弃04</title>
      <link href="2021/02/27/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8304/"/>
      <url>2021/02/27/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8304/</url>
      
        <content type="html"><![CDATA[<h1 id="条件和循环"><a href="#条件和循环" class="headerlink" title="条件和循环"></a>条件和循环<span id="more"></span></h1><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if…eles…"><a href="#if…eles…" class="headerlink" title="if…eles…"></a>if…eles…</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line">  <span class="comment">// if后面跟一个布尔表达式或bool类型变量</span></span><br><span class="line">  <span class="keyword">if</span> flag &#123;</span><br><span class="line">    <span class="comment">// 如果条件为真，执行下面一句代码</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;立了flag&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则，执行下面一句代码</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;没有立flag&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">立了flag</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h3 id="switch-case…"><a href="#switch-case…" class="headerlink" title="switch case…"></a>switch case…</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 定义季节</span></span><br><span class="line">  <span class="keyword">var</span> season = <span class="number">1</span></span><br><span class="line">  <span class="comment">// 开始匹配</span></span><br><span class="line">  <span class="keyword">switch</span> season &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;春天&quot;</span>)</span><br><span class="line">    <span class="comment">// 匹配到1，则执行打印夏天</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;夏天&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;秋天&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;冬天&quot;</span>)</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;处于四季之外的季节&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">夏天</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="单层for循环"><a href="#单层for循环" class="headerlink" title="单层for循环"></a>单层for循环</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  sum := <span class="number">0</span></span><br><span class="line">  <span class="comment">// i初始值为0，for循环开始执行一次；当i&lt;=10时,执行sum = sum + i；</span></span><br><span class="line">  <span class="comment">// 之后i自增1，在判断i是否小于等于10，是则继续，否则退出for循环</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i&lt;=<span class="number">10</span>; i++ &#123;</span><br><span class="line">    sum += i</span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">55</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h4 id="多层for循环"><a href="#多层for循环" class="headerlink" title="多层for循环"></a>多层for循环</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= i; j++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;%d*%d=%d\t&quot;</span>, j, i, j*i)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1*1=1</span><br><span class="line">1*2=22*2=4</span><br><span class="line">1*3=32*3=63*3=9</span><br><span class="line">1*4=42*4=83*4=124*4=16</span><br><span class="line">1*5=52*5=103*5=154*5=205*5=25</span><br><span class="line">1*6=62*6=123*6=184*6=245*6=306*6=36</span><br><span class="line">1*7=72*7=143*7=214*7=285*7=356*7=427*7=49</span><br><span class="line">1*8=82*8=163*8=244*8=325*8=406*8=487*8=568*8=64</span><br><span class="line">1*9=92*9=183*9=274*9=365*9=456*9=547*9=638*9=729*9=81</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h4 id="for-range"><a href="#for-range" class="headerlink" title="for range"></a>for range</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 定义切片</span></span><br><span class="line">  titles := []<span class="keyword">string</span>&#123;<span class="string">&quot;为了部落&quot;</span>, <span class="string">&quot;为了联盟&quot;</span>&#125;</span><br><span class="line">  <span class="comment">// rang关键字遍历切片，返回i、v，分别为索引和值</span></span><br><span class="line">  <span class="keyword">for</span> i, v := <span class="keyword">range</span> titles &#123;</span><br><span class="line">    fmt.Println(i, v)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 为了部落</span><br><span class="line">1 为了联盟</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang从入门到放弃03</title>
      <link href="2021/02/25/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8303/"/>
      <url>2021/02/25/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8303/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-语言运算符"><a href="#Go-语言运算符" class="headerlink" title="Go 语言运算符"></a>Go 语言运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符<span id="more"></span></h2><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>+</td><td>相加</td></tr><tr><td>-</td><td>相减</td></tr><tr><td>*</td><td>相乘</td></tr><tr><td>/</td><td>相除</td></tr><tr><td>++</td><td>自增</td></tr><tr><td>–</td><td>自减</td></tr><tr><td>%</td><td>求余数</td></tr></tbody></table><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>==</td><td>左右两边相等返回true，不相等返回false</td></tr><tr><td>!=</td><td>左右两边不相等返回true，相等返回false</td></tr><tr><td>&gt;</td><td>左边大于右边返回true，否则返回false</td></tr><tr><td>&gt;=</td><td>左边大于等于右边返回true，否则返回false</td></tr><tr><td>&lt;</td><td>左边小于右边返回true，否则返回false</td></tr><tr><td>&lt;=</td><td>左边小于等于右边返回true，否则返回false</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与（and），只有左右两边都为true，返回true；否则返回false</td></tr><tr><td>||</td><td>或（or），只要左右有一个true，返回true；否则返回false</td></tr><tr><td>！</td><td>非（not），true条件之前加上它，就变成false；false条件前加上它，就变成true</td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>用于对二进制位进行操作，比如数字4的二进制位是0100，数字5的二进制位是0101</p><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与，对应位上两个都是1才是1，(4&amp;5)  -&gt;（0100&amp;0101）为0100 -&gt;数字4</td></tr><tr><td>|</td><td>按位或，对应位上只要有1就是1，(4&amp;5)  -&gt;（0100&amp;0101）为0101 -&gt;数字5</td></tr><tr><td>^</td><td>按位异或，对应位置不同为1，相同为0，(4^5)  -&gt;（0100^0101）为0001 -&gt;数字1</td></tr><tr><td>&lt;&lt;</td><td>左移，低位补0，左移1位乘2，左移两位乘4，左移n位乘2的n次方，(4&lt;&lt;2) -&gt; (0100&lt;&lt;2)为010000 -&gt;数字16</td></tr><tr><td>&gt;&gt;</td><td>右移，与左移相反</td></tr></tbody></table><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>=    +=    -=    *=    =    等等</p><h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>&amp;</td><td>取变量的地址，&amp;a，返回变量a的地址</td></tr><tr><td>*</td><td>指针运算符，可以表示一个变量是个指针类型，也可以获取一个指针变量所指向的值</td></tr></tbody></table><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/25/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8303/image-20210226001556329.png" alt="image-20210226001556329"></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/25/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8303/image-20210226002844617.png" alt="image-20210226002844617"></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是灰度发布</title>
      <link href="2021/02/25/%E4%BB%80%E4%B9%88%E6%98%AF%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/"/>
      <url>2021/02/25/%E4%BB%80%E4%B9%88%E6%98%AF%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是灰度发布，以及灰度发布A-B测试"><a href="#什么是灰度发布，以及灰度发布A-B测试" class="headerlink" title="什么是灰度发布，以及灰度发布A/B测试"></a>什么是灰度发布，以及灰度发布A/B测试</h1><p>最近听到灰度发布，之前从没听说过，于是百度了一下。<span id="more"></span></p><p>在一般情况下，升级服务器端应用，需要将应用源码或程序包上传到服务器，然后停止掉老版本服务，再启动新版本。但是这种简单的发布方式存在两个问题，一方面，在新版本升级过程中，服务是暂时中断的，另一方面，如果新版本有BUG，升级失败，回滚起来也非常麻烦，容易造成更长时间的服务不可用。</p><p>为了解决这些问题，人们研究出了多种发布策略，下面我们一一介绍。</p><h2 id="蓝绿部署"><a href="#蓝绿部署" class="headerlink" title="蓝绿部署"></a>蓝绿部署</h2><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/25/%E4%BB%80%E4%B9%88%E6%98%AF%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/20180822160107866" alt="img"></p><p>所谓蓝绿部署，是指同时运行两个版本的应用，如上图所示，蓝绿部署的时候，并不停止掉老版本，而是直接部署一套新版本，等新版本运行起来后，再将流量切换到新版本上。但是蓝绿部署要求在升级过程中，同时运行两套程序，对硬件的要求就是日常所需的二倍，比如日常运行时，需要10台服务器支撑业务，那么使用蓝绿部署，你就需要购置二十台服务器。</p><h2 id="滚动发布"><a href="#滚动发布" class="headerlink" title="滚动发布"></a>滚动发布</h2><p>滚动发布能够解决掉蓝绿部署时对硬件要求增倍的问题。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/25/%E4%BB%80%E4%B9%88%E6%98%AF%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/20180822160130273" alt="img"></p><p>所谓滚动升级，就是在升级过程中，并不一下子启动所有新版本，是先启动一台新版本，再停止一台老版本，然后再启动一台新版本，再停止一台老版本，直到升级完成，这样的话，如果日常需要10台服务器，那么升级过程中也就只需要11台就行了。</p><p>但是滚动升级有一个问题，在开始滚动升级后，流量会直接流向已经启动起来的新版本，但是这个时候，新版本是不一定可用的，比如需要进一步的测试才能确认。那么在滚动升级期间，整个系统就处于非常不稳定的状态，如果发现了问题，也比较难以确定是新版本还是老版本造成的问题。</p><p>为了解决这个问题，我们需要为滚动升级实现流量控制能力。</p><h2 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h2><p>灰度发布也叫金丝雀发布，起源是，矿井工人发现，金丝雀对瓦斯气体很敏感，矿工会在下井之前，先放一只金丝雀到井中，如果金丝雀不叫了，就代表瓦斯浓度高。</p><p>灰度发布（金丝雀发布）是指在黑与白之间，能够平滑过渡的一种发布方式。在其上可以进行A/B testing，即让一部分用户继续用产品特性A，一部分用户开始用产品特性B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度。</p><p>灰度期：灰度发布开始到结束期间的这一段时间，称为灰度期。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/25/%E4%BB%80%E4%B9%88%E6%98%AF%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/20180822160153895" alt="img"></p><p>在灰度发布开始后，先启动一个新版本应用，但是并不直接将流量切过来，而是测试人员对新版本进行线上测试，启动的这个新版本应用，就是我们的金丝雀。如果没有问题，那么可以将少量的用户流量导入到新版本上，然后再对新版本做运行状态观察，收集各种运行时数据，如果此时对新旧版本做各种数据对比，就是所谓的A/B测试。</p><p>当确认新版本运行良好后，再逐步将更多的流量导入到新版本上，在此期间，还可以不断地调整新旧两个版本的运行的服务器副本数量，以使得新版本能够承受越来越大的流量压力。直到将100%的流量都切换到新版本上，最后关闭剩下的老版本服务，完成灰度发布。</p><p>如果在灰度发布过程中（灰度期）发现了新版本有问题，就应该立即将流量切回老版本上，这样，就会将负面影响控制在最小范围内。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在新版本应用发布时，为了服务器不停机升级，使用灰度发布策略，在灰度发布开始时，使用HTTP Header 匹配指定测试人员的流量到新版本上，然后当新版本内部测试通过后，可以再按百分比，将用户流量一点一点导入到新版本中，比如先导入10%观察一下运行情况，然后再导入20%，如此累加，直到将流量全部导入到新版本上，最后完成升级，如果期间发现问题，就立即取消升级，将流量切回到老版本。</p><p>运用灰度发布，就再也不需要加班到深夜进行停机升级了，在白天就可以放心大胆地、安全地发布新版本。</p><p>转载自：<a href="https://blog.csdn.net/qq_42234452/article/details/90906692">https://blog.csdn.net/qq_42234452/article/details/90906692</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 灰度发布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零:月蚀的假面</title>
      <link href="2021/02/24/%E9%9B%B6-%E6%9C%88%E8%9A%80%E7%9A%84%E5%81%87%E9%9D%A2/"/>
      <url>2021/02/24/%E9%9B%B6-%E6%9C%88%E8%9A%80%E7%9A%84%E5%81%87%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>《零:月蚀的假面》是一款动作解谜游戏，是《<a href="https://baike.baidu.com/item/%E9%9B%B6/138918">零</a>》系列的第四作。</p><p>零系列从发布年代开始分别为：<span id="more"></span>《零:Zero》（没玩过）、《零:红蝶》（非常感人）、《零:刺青之声》、《零:月蚀的假面》、《零:濡鸦之巫女》</p><p>最初接触到这个游戏还是13年的时候，那时使用各种搜索找到了开启在win7上体验该游戏的方法。</p><p>原来游戏可以这么设计，之后发现同类型的作品《小镇惊魂》也相当不错。</p><p>零系列百度网盘：<a href="https://pan.baidu.com/s/1-HsneTRz0YIjwfKcCqGw6g">https://pan.baidu.com/s/1-HsneTRz0YIjwfKcCqGw6g</a></p><p>提取码：jl3q</p><p><strong>图先欠着</strong></p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文字冒险游戏20210221</title>
      <link href="2021/02/21/%E6%96%87%E5%AD%97%E5%86%92%E9%99%A9%E6%B8%B8%E6%88%8F20210221/"/>
      <url>2021/02/21/%E6%96%87%E5%AD%97%E5%86%92%E9%99%A9%E6%B8%B8%E6%88%8F20210221/</url>
      
        <content type="html"><![CDATA[<h1 id="1-《白色相簿2》"><a href="#1-《白色相簿2》" class="headerlink" title="1.《白色相簿2》"></a>1.《白色相簿2》</h1><p>如果你听说过</p><p>“又到了白色相簿的季节”</p><span id="more"></span><p>“是我，是我先，明明都是我先来的……”</p><p>“为什么这么熟练”</p><p>……</p><p> 那么你一定了解白学</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/21/%E6%96%87%E5%AD%97%E5%86%92%E9%99%A9%E6%B8%B8%E6%88%8F20210221/%E7%99%BD%E5%AD%A6.jpg" alt="avatar"></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/21/%E6%96%87%E5%AD%97%E5%86%92%E9%99%A9%E6%B8%B8%E6%88%8F20210221/WhiteAlbum.jpg" alt="avatar"></p><p>下载链接：资源我再找找</p><h1 id="2-《壳之少女》"><a href="#2-《壳之少女》" class="headerlink" title="2. 《壳之少女》"></a>2. 《壳之少女》</h1><p>《壳之少女》是Innocent Grey开发的推理猎奇类<a href="https://baike.baidu.com/item/AVG%E6%B8%B8%E6%88%8F/6702220">AVG游戏</a>，有一种魔力想一直探索然后呢，之后呢，后来呢，最后呢… …</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/21/%E6%96%87%E5%AD%97%E5%86%92%E9%99%A9%E6%B8%B8%E6%88%8F20210221/%E5%A3%B301.png" alt="avatar"></p><p>下载链接：<a href="https://pan.baidu.com/s/1KEkzsAegAp894WV8wnJoQQ">https://pan.baidu.com/s/1KEkzsAegAp894WV8wnJoQQ</a></p><p>提取码：4vf2</p><h1 id="3-《Fate-stay-night》"><a href="#3-《Fate-stay-night》" class="headerlink" title="3.《Fate/stay night》"></a>3.《Fate/stay night》</h1><p>《Fate/stay night》命运/守护之夜讲述了圣杯是传说中可实现持有者一切愿望的宝物，而为了得到圣杯的仪式就被称为圣杯战争。 参加圣杯战争的七名由圣杯选出的魔术师被称为Master，与七名被称为Servant的使魔订定契约。他们是由圣杯选择的七位英灵，被分为七个职阶，以使魔的身份被召唤出来。能获得圣杯的只有一组，这七组人马各自为了成为最后的那一组而互相残杀。 卫宫切嗣的养子卫宫士郎，偶然地与Servant中的剑士（Saber）定下契约，被卷入圣杯战争当中。 在游戏版本中，随着初期选择的不同，后面剧情亦会出现极大改变，共有三线。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/21/%E6%96%87%E5%AD%97%E5%86%92%E9%99%A9%E6%B8%B8%E6%88%8F20210221/fatestaynight.jpg" alt="avatar"></p><p>下载链接：<a href="https://pan.baidu.com/s/1Le67Z9i5HNmKRgBH9HWwuQ">https://pan.baidu.com/s/1Le67Z9i5HNmKRgBH9HWwuQ</a></p><p>提取码：qwg8</p><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><p>以上资源来源网络，如有侵权，请联系删除：<a href="mailto:&#x31;&#51;&#49;&#48;&#50;&#x33;&#x35;&#57;&#x37;&#x30;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;">&#x31;&#51;&#49;&#48;&#50;&#x33;&#x35;&#57;&#x37;&#x30;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;</a></p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全网公认最好看的9部韩剧，《旋转木马》仅排第5，倒数第1名仍然地位稳固...</title>
      <link href="2021/02/21/%E5%85%A8%E7%BD%91%E5%85%AC%E8%AE%A4%E6%9C%80%E5%A5%BD%E7%9C%8B%E7%9A%849%E9%83%A8%E9%9F%A9%E5%89%A7%EF%BC%8C%E3%80%8A%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E3%80%8B%E4%BB%85%E6%8E%92%E7%AC%AC5%EF%BC%8C%E5%80%92%E6%95%B0%E7%AC%AC1%E5%90%8D%E4%BB%8D%E7%84%B6%E5%9C%B0%E4%BD%8D%E7%A8%B3%E5%9B%BA/"/>
      <url>2021/02/21/%E5%85%A8%E7%BD%91%E5%85%AC%E8%AE%A4%E6%9C%80%E5%A5%BD%E7%9C%8B%E7%9A%849%E9%83%A8%E9%9F%A9%E5%89%A7%EF%BC%8C%E3%80%8A%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E3%80%8B%E4%BB%85%E6%8E%92%E7%AC%AC5%EF%BC%8C%E5%80%92%E6%95%B0%E7%AC%AC1%E5%90%8D%E4%BB%8D%E7%84%B6%E5%9C%B0%E4%BD%8D%E7%A8%B3%E5%9B%BA/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/21/%E5%85%A8%E7%BD%91%E5%85%AC%E8%AE%A4%E6%9C%80%E5%A5%BD%E7%9C%8B%E7%9A%849%E9%83%A8%E9%9F%A9%E5%89%A7%EF%BC%8C%E3%80%8A%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E3%80%8B%E4%BB%85%E6%8E%92%E7%AC%AC5%EF%BC%8C%E5%80%92%E6%95%B0%E7%AC%AC1%E5%90%8D%E4%BB%8D%E7%84%B6%E5%9C%B0%E4%BD%8D%E7%A8%B3%E5%9B%BA/loading.gif" alt="avatar"></p><span id="more"></span><h1 id="1-《搞笑一家人-不可阻挡的High-Kick-》"><a href="#1-《搞笑一家人-不可阻挡的High-Kick-》" class="headerlink" title="1.《搞笑一家人 不可阻挡的High Kick!》"></a>1.《搞笑一家人 不可阻挡的High Kick!》</h1><p>《搞笑一家人》以李顺才一家从老头开始到其他所有角色，搞笑的剧情一点也不会觉得是无厘头的那种，而且到后面也有有些伤感的剧情，整个给人的感觉是搞笑中又不失温暖。最搞笑的是那个老头，看优良股被发现后一个星期没有回家…</p><p>上映时间：2006年</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/21/%E5%85%A8%E7%BD%91%E5%85%AC%E8%AE%A4%E6%9C%80%E5%A5%BD%E7%9C%8B%E7%9A%849%E9%83%A8%E9%9F%A9%E5%89%A7%EF%BC%8C%E3%80%8A%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E3%80%8B%E4%BB%85%E6%8E%92%E7%AC%AC5%EF%BC%8C%E5%80%92%E6%95%B0%E7%AC%AC1%E5%90%8D%E4%BB%8D%E7%84%B6%E5%9C%B0%E4%BD%8D%E7%A8%B3%E5%9B%BA/%E6%90%9E%E7%AC%91%E4%B8%80%E5%AE%B6%E4%BA%BA.jpg" alt="avatar"></p><h1 id="2-《未生》"><a href="#2-《未生》" class="headerlink" title="2.《未生》"></a>2.《未生》</h1><p>《未生》主要以上班族为剧情主线，其中人物的生活、工作等方方面面当时可是引起了不少观众的共鸣，同时也激励着不少职场中人要记得每天努力向前奔跑。</p><p>上映时间：2014年</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/21/%E5%85%A8%E7%BD%91%E5%85%AC%E8%AE%A4%E6%9C%80%E5%A5%BD%E7%9C%8B%E7%9A%849%E9%83%A8%E9%9F%A9%E5%89%A7%EF%BC%8C%E3%80%8A%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E3%80%8B%E4%BB%85%E6%8E%92%E7%AC%AC5%EF%BC%8C%E5%80%92%E6%95%B0%E7%AC%AC1%E5%90%8D%E4%BB%8D%E7%84%B6%E5%9C%B0%E4%BD%8D%E7%A8%B3%E5%9B%BA/%E6%9C%AA%E7%94%9F.jpg" alt="avatar"></p><h1 id="3-《来自星星的你》"><a href="#3-《来自星星的你》" class="headerlink" title="3.《来自星星的你》"></a>3.《来自星星的你》</h1><p>《来自星星的你》虽然已经过去很久，但当时火遍校园。获奖无数的外星人题材并不足以让人称奇，但是像电影一样充满复杂的剪辑方式，并且在爱情线中插入一条杀人线，让剧情充满悬疑感。在教授和女明星的爱情方面，虽然两人也难以逃脱“生病”、“受伤”等韩剧必经之路，但这个过程却不再走苦情虐心的路线，反而往往充满很多轻松的萌点、笑点，角色的人设也是最重要的魅力点 。<em>（南方日报评）</em></p><p>上映时间：2013年</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/21/%E5%85%A8%E7%BD%91%E5%85%AC%E8%AE%A4%E6%9C%80%E5%A5%BD%E7%9C%8B%E7%9A%849%E9%83%A8%E9%9F%A9%E5%89%A7%EF%BC%8C%E3%80%8A%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E3%80%8B%E4%BB%85%E6%8E%92%E7%AC%AC5%EF%BC%8C%E5%80%92%E6%95%B0%E7%AC%AC1%E5%90%8D%E4%BB%8D%E7%84%B6%E5%9C%B0%E4%BD%8D%E7%A8%B3%E5%9B%BA/%E6%9D%A5%E8%87%AA%E6%98%9F%E6%98%9F%E7%9A%84%E4%BD%A0.jpg" alt="avatar"></p><h1 id="4-《Dream-High》"><a href="#4-《Dream-High》" class="headerlink" title="4.《Dream High》"></a>4.《Dream High》</h1><p>《Dream High》(追梦高中)一部以艺术高中为背景的青春剧。预定在电视剧中刻画期望着成为歌手、演员、舞蹈演员等的十几岁的青少年们的梦想与挫折，讲述他们成长过程的辛苦和友情等故事。另外，电视剧还将反映韩国娱乐产业的实际情况。 该电视剧是怀有明星梦的艺术高中的学生们的故事的电视剧。制作阶段开始，裴勇俊和朴振英的会面，成为人们的话题。 《Dream High》是讲演艺艺术学校内发生的事件和矛盾中成长的学生们的故事。内容市包括歌曲、舞蹈、演技”等有趣的看点和国内娱乐产业的实际可以看出模样的作品。</p><p>上映时间：2011年</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/21/%E5%85%A8%E7%BD%91%E5%85%AC%E8%AE%A4%E6%9C%80%E5%A5%BD%E7%9C%8B%E7%9A%849%E9%83%A8%E9%9F%A9%E5%89%A7%EF%BC%8C%E3%80%8A%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E3%80%8B%E4%BB%85%E6%8E%92%E7%AC%AC5%EF%BC%8C%E5%80%92%E6%95%B0%E7%AC%AC1%E5%90%8D%E4%BB%8D%E7%84%B6%E5%9C%B0%E4%BD%8D%E7%A8%B3%E5%9B%BA/DreamHigh.jpg" alt="avatar"></p><h1 id="5-《旋转木马》"><a href="#5-《旋转木马》" class="headerlink" title="5.《旋转木马》"></a>5.《旋转木马》</h1><p>《旋转木马》在DNF很盛行，LOL还没出来的时候，在网吧看到网管在看……剧中乔恩（张瑞希 饰）和乔榛（秀爱 饰）是一对感情十分要好的姐妹，原本富裕的家庭突遭变故，一夜之间，两个女孩失去了包括家庭在内的一切，过起了半工半读的辛苦生活。一次偶然中，乔恩结识了名叫姜宇燮（金南镇 饰）的男子，两人情投意合，很快就走到了一起。然而，一系列意外让乔恩渐渐失去了对姜宇燮的信任，敏感的她选择了离开。之后，乔恩遇见了善良的秀衡（柳秀容 饰），秀衡的温柔慢慢治愈了乔恩受伤的心灵，两人决定携手踏入婚姻的殿堂。然而，就在此时，满腔怒火的姜宇燮出现在了乔恩的面前，粗暴地占有了这个即将成为新娘的女人，与此同时，秀衡的妹妹秀莲（金智友 饰）痴痴地爱上了姜宇燮。</p><p>上映时间：2003年</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/21/%E5%85%A8%E7%BD%91%E5%85%AC%E8%AE%A4%E6%9C%80%E5%A5%BD%E7%9C%8B%E7%9A%849%E9%83%A8%E9%9F%A9%E5%89%A7%EF%BC%8C%E3%80%8A%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E3%80%8B%E4%BB%85%E6%8E%92%E7%AC%AC5%EF%BC%8C%E5%80%92%E6%95%B0%E7%AC%AC1%E5%90%8D%E4%BB%8D%E7%84%B6%E5%9C%B0%E4%BD%8D%E7%A8%B3%E5%9B%BA/%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC.jpg" alt="avatar"></p><h1 id="6-《大长今》"><a href="#6-《大长今》" class="headerlink" title="6.《大长今》"></a>6.《大长今》</h1><p>《大长今》很有名的，当时火遍大街小巷，闹市静区，跳过，下一个</p><h1 id="7-《爱情需要奇迹》"><a href="#7-《爱情需要奇迹》" class="headerlink" title="7.《爱情需要奇迹》"></a>7.《爱情需要奇迹》</h1><p>《爱情需要奇迹》男主像高中时的同桌，女主像高中时的前桌，讲述了因抚养着死去朋友的儿子而变成“未婚妈妈”的车凤馨与二世小开陈正标的故事。其中女主在写字楼门口等雨跺脚很有灵性…</p><p>上映时间：2005年</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/21/%E5%85%A8%E7%BD%91%E5%85%AC%E8%AE%A4%E6%9C%80%E5%A5%BD%E7%9C%8B%E7%9A%849%E9%83%A8%E9%9F%A9%E5%89%A7%EF%BC%8C%E3%80%8A%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E3%80%8B%E4%BB%85%E6%8E%92%E7%AC%AC5%EF%BC%8C%E5%80%92%E6%95%B0%E7%AC%AC1%E5%90%8D%E4%BB%8D%E7%84%B6%E5%9C%B0%E4%BD%8D%E7%A8%B3%E5%9B%BA/%E7%88%B1%E6%83%85%E9%9C%80%E8%A6%81%E5%A5%87%E8%BF%B9.png" alt="avatar"></p><h1 id="8-《城市猎人》"><a href="#8-《城市猎人》" class="headerlink" title="8.《城市猎人》"></a>8.《城市猎人》</h1><p>《城市猎人》讲述由于总统在缅甸遭受恐怖袭击，所以国防部决定对朝鲜进行报复行动，该行动由国防部长崔英灿主导，但21名特种部队成员完成任务后却遭灭口，在好友朴武烈保护下，李震彪（金相中 饰）成了唯一的幸存者。面对国家背叛，他决定复仇。他抢走了朴武烈的独子潜逃至泰国，抚养他长大。28年后，从美国MIT学成归来的李润成（李敏镐 饰），带着义父复仇的旨意回到韩国。为了掩人耳目，他的身份是青瓦台国家通信网特聘专家，阴错阳差结识了青瓦台警卫员金娜娜（朴敏英 饰），后者身世凄惨，但颇为坚强，相似的命运让两人发生了一段生死之恋。李润成在复仇时用了“城市猎人”的代号，成为首尔检察官金英株（李俊赫 饰）一直追逐的目标。在一个个消灭主谋的同时，真相正在浮出水面……</p><p>上映时间：2011年</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/21/%E5%85%A8%E7%BD%91%E5%85%AC%E8%AE%A4%E6%9C%80%E5%A5%BD%E7%9C%8B%E7%9A%849%E9%83%A8%E9%9F%A9%E5%89%A7%EF%BC%8C%E3%80%8A%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E3%80%8B%E4%BB%85%E6%8E%92%E7%AC%AC5%EF%BC%8C%E5%80%92%E6%95%B0%E7%AC%AC1%E5%90%8D%E4%BB%8D%E7%84%B6%E5%9C%B0%E4%BD%8D%E7%A8%B3%E5%9B%BA/%E5%9F%8E%E5%B8%82%E7%8C%8E%E4%BA%BA.jpg" alt="avatar"></p><h1 id="9-《宇宙英雄奥特曼》"><a href="#9-《宇宙英雄奥特曼》" class="headerlink" title="9.《宇宙英雄奥特曼》"></a>9.《宇宙英雄奥特曼》</h1><p>《宇宙英雄奥特曼》作为<strong>初代奥特曼</strong>，他是来自<a href="https://baike.baidu.com/item/M78%E6%98%9F%E4%BA%91/20353950">M78星云</a>的光之巨人，为了追捕逃亡的宇宙怪兽<a href="https://baike.baidu.com/item/%E7%99%BE%E6%85%95%E6%8B%89/4745177">百慕拉</a>而来到地球。在龙森湖上空追击百慕拉时，他不慎与<a href="https://baike.baidu.com/item/%E7%A7%91%E5%AD%A6%E7%89%B9%E6%90%9C%E9%98%9F/2713811">科学特搜队</a>队员<a href="https://baike.baidu.com/item/%E6%97%A9%E7%94%B0%E8%BF%9B/3398867">早田进</a>所乘的飞机相撞，致其坠机死亡。为了弥补自己的过失以及挽救早田的生命，奥特曼将自己的生命给予了早田，与之一心同体使其复活。之后，奥特曼与早田一起，为保卫地球而与众多凶暴的怪兽和邪恶的宇宙人展开了激烈的战斗 。在这之后出现了佐菲、赛文、杰克、艾斯、泰罗、雷欧、艾迪、迪迦、戴拿、盖亚、赛文21、梦比优斯……</p><p>奥特曼是奥特系列历史中第一位登场的奥特战士，被誉为起源的巨人，他阳光乐观的形象使得那个年代的年轻人们度过无忧无虑纯粹的时光。</p><p>上映时间：1966年</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/21/%E5%85%A8%E7%BD%91%E5%85%AC%E8%AE%A4%E6%9C%80%E5%A5%BD%E7%9C%8B%E7%9A%849%E9%83%A8%E9%9F%A9%E5%89%A7%EF%BC%8C%E3%80%8A%E6%97%8B%E8%BD%AC%E6%9C%A8%E9%A9%AC%E3%80%8B%E4%BB%85%E6%8E%92%E7%AC%AC5%EF%BC%8C%E5%80%92%E6%95%B0%E7%AC%AC1%E5%90%8D%E4%BB%8D%E7%84%B6%E5%9C%B0%E4%BD%8D%E7%A8%B3%E5%9B%BA/%E5%A5%A5%E7%89%B9%E6%9B%BC.jpg" alt="avatar"></p><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><p>以上排名由系统随机生成，图片、文字描述拷贝自网络。 </p><p>如有侵权，请联系删除：<a href="mailto:&#49;&#x33;&#49;&#48;&#50;&#51;&#53;&#57;&#x37;&#x30;&#x40;&#x71;&#113;&#x2e;&#x63;&#111;&#x6d;">&#49;&#x33;&#49;&#48;&#50;&#51;&#53;&#57;&#x37;&#x30;&#x40;&#x71;&#113;&#x2e;&#x63;&#111;&#x6d;</a></p>]]></content>
      
      
      <categories>
          
          <category> 影视 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影视 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang从入门到放弃02</title>
      <link href="2021/02/18/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8302/"/>
      <url>2021/02/18/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8302/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言常量"><a href="#Go语言常量" class="headerlink" title="Go语言常量"></a>Go语言常量</h1><p>使用const关键字声明</p><p><strong>demo1</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">const</span> SPRING <span class="keyword">string</span> = <span class="string">&quot;春天&quot;</span></span><br><span class="line">  <span class="keyword">const</span> SUMMER <span class="keyword">string</span> = <span class="string">&quot;夏天&quot;</span></span><br><span class="line">  <span class="keyword">const</span> AUTUMN <span class="keyword">string</span> = <span class="string">&quot;秋天&quot;</span></span><br><span class="line">  <span class="keyword">const</span> WINTER <span class="keyword">string</span> = <span class="string">&quot;冬天&quot;</span></span><br><span class="line">  <span class="built_in">println</span>(SPRING, SUMMER, AUTUMN, WINTER)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">春天 夏天 秋天 冬天</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><p><strong>demo2</strong></p><p>iota，特殊常量，在const关键字出现时被重置为0，const中每新增一行常量声明iota自动加1。</p><p>iota 只是在同一个 const 常量组内递增，每当有新的 const 关键字时，iota 计数会重新开始。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span></span><br><span class="line">    b = <span class="literal">iota</span></span><br><span class="line">    c = <span class="string">&quot;请忽略我&quot;</span></span><br><span class="line">    d = <span class="literal">iota</span></span><br><span class="line">    e</span><br><span class="line">    f = <span class="literal">iota</span></span><br><span class="line">    g</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">const</span> h = <span class="literal">iota</span></span><br><span class="line">  <span class="keyword">const</span> i = <span class="literal">iota</span></span><br><span class="line">  fmt.Println(a, b, c, d, e, f, g, h, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 1 请忽略我 3 4 5 6 0 0</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><p><strong>demo3</strong></p><p>iota与左移（参考<a href="https://www.runoob.com/go/go-constants.html">菜鸟教程</a>）</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">const</span> (</span><br><span class="line">    i = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span></span><br><span class="line">    j = <span class="number">3</span> &lt;&lt; <span class="literal">iota</span></span><br><span class="line">    k</span><br><span class="line">    l</span><br><span class="line">  )</span><br><span class="line">  fmt.Println(<span class="string">&quot;i=&quot;</span>, i)</span><br><span class="line">  fmt.Println(<span class="string">&quot;j=&quot;</span>, j)</span><br><span class="line">  fmt.Println(<span class="string">&quot;k=&quot;</span>, k)</span><br><span class="line">  fmt.Println(<span class="string">&quot;l=&quot;</span>, l)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">i= 1</span><br><span class="line">j= 6</span><br><span class="line">k= 12</span><br><span class="line">l= 24</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><p>简单表述：iota 表示从 0 开始自动加 1，所以 <strong>i=1&lt;&lt;0</strong>, <strong>j=3&lt;&lt;1</strong>（**&lt;&lt;** 表示左移的意思，左移1位乘以2，左移2位乘以4，左移n位乘以2的n次方），即：i=1, j=6，这没问题，关键在 k 和 l，从输出结果看 <strong>k=3&lt;&lt;2</strong>，<strong>l=3&lt;&lt;3</strong>。</p><p>可以认为左移是二进制位移动，末尾添0</p><p>i=1左移0位，不变仍为1；</p><p>j=3左移1位，由11变为110，即6</p><p>k=3左移2位，由11变为1100，即12</p><p>l=3左移3位，由11变为11000，即24    </p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang从入门到放弃01</title>
      <link href="2021/02/18/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8301/"/>
      <url>2021/02/18/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8301/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言的数据类型"><a href="#Go语言的数据类型" class="headerlink" title="Go语言的数据类型"></a>Go语言的数据类型</h1><table><thead><tr><th align="left">类型</th><th>描述</th></tr></thead><tbody><tr><td align="left">布尔(bool)</td><td>true、false</td></tr><tr><td align="left">字符串(string)</td><td>“我是字符串”</td></tr><tr><td align="left">数字</td><td>见下图</td></tr><tr><td align="left">非基本类型</td><td>指针、数组、结构体、接口、Map、切片、函数、Channel</td></tr></tbody></table><span id="more"></span><table><thead><tr><th>数字类型</th><th>描述</th></tr></thead><tbody><tr><td>int8、uint8</td><td>-128到127、0到255</td></tr><tr><td>int16、uint16</td><td>-32768到32767、0到65535</td></tr><tr><td>int32、uint32</td><td>-2147483648到2147483647、0到4294967295</td></tr><tr><td>int64、uint64</td><td>-9223372036854775808到9223372036854775807、0到18446744073709551615</td></tr><tr><td>float32</td><td>1.401298464324817070923729583289916131280e-45到3.402823466385288598117041834516925440e+38</td></tr><tr><td>float64</td><td>4.940656458412465441765687928682213723651e-324到1.797693134862315708145274237317043567981e+308</td></tr><tr><td>byte</td><td>类似uint8</td></tr><tr><td>rune</td><td>类似int32</td></tr><tr><td>int</td><td>32 或 64 位,取决于操作系统</td></tr><tr><td>uint</td><td>32 或 64 位,取决于操作系统</td></tr></tbody></table><h1 id="Go语言变量"><a href="#Go语言变量" class="headerlink" title="Go语言变量"></a>Go语言变量</h1><p>Go 语言变量名由字母、数字、下划线组成，首个字符不能为数字。</p><p><strong>demo1</strong></p><p>声明变量的一般使用 var 关键字，每行结束不用加封号（；）</p><p>fmt.Print（变量名）    #打印不换行</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a <span class="keyword">int8</span> = <span class="number">2</span></span><br><span class="line">  <span class="keyword">var</span> b <span class="keyword">string</span> = <span class="string">&quot;B&quot;</span></span><br><span class="line">  <span class="keyword">var</span> c <span class="keyword">string</span> = <span class="string">&quot;小姐姐&quot;</span></span><br><span class="line">  fmt.Print(a)</span><br><span class="line">  fmt.Print(b)</span><br><span class="line">  fmt.Print(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2B小姐姐</span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><p><strong>demo2</strong></p><p>var a string    #只声明不赋值，打印默认值</p><p>b := “字符串”      :=为声明并赋值</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line">  b := <span class="string">&quot;字符串&quot;</span></span><br><span class="line">  fmt.Println(a)</span><br><span class="line">  fmt.Println(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">字符串</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><p><strong>demo3</strong></p><p>空白符_     #占个位置，对接收的数据不处理</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  _, secondParam, thirdParam := getData()</span><br><span class="line">  fmt.Println(secondParam, thirdParam)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getData</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  a, b, c := <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;345&quot;</span></span><br><span class="line">  <span class="keyword">return</span> a, b, c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2 345</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 canvas 240行代码实现粒子漩涡特效</title>
      <link href="2021/02/17/HTML5-canvas-240%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%B2%92%E5%AD%90%E6%BC%A9%E6%B6%A1%E7%89%B9%E6%95%88/"/>
      <url>2021/02/17/HTML5-canvas-240%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%B2%92%E5%AD%90%E6%BC%A9%E6%B6%A1%E7%89%B9%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p> <strong>效果</strong></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/HTML5-canvas-240%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%B2%92%E5%AD%90%E6%BC%A9%E6%B6%A1%E7%89%B9%E6%95%88/image-20210217215722923.png" alt="image-20210217215722923"><span id="more"></span></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/HTML5-canvas-240%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%B2%92%E5%AD%90%E6%BC%A9%E6%B6%A1%E7%89%B9%E6%95%88/image-20210217215841145.png" alt="image-20210217215841145"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>网上抄的<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>:<span class="number">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    #canvas&#123;</span><br><span class="line"><span class="css">      <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>:<span class="number">100%</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">project3D</span>(<span class="params">x,y,z,vars</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p,d;</span></span><br><span class="line">    x-=vars.camX;</span><br><span class="line">    y-=vars.camY-8;</span><br><span class="line">    z-=vars.camZ;</span><br><span class="line"><span class="javascript">    p=<span class="built_in">Math</span>.atan2(x,z);</span></span><br><span class="line"><span class="javascript">    d=<span class="built_in">Math</span>.sqrt(x*x+z*z);</span></span><br><span class="line"><span class="javascript">    x=<span class="built_in">Math</span>.sin(p-vars.yaw)*d;</span></span><br><span class="line"><span class="javascript">    z=<span class="built_in">Math</span>.cos(p-vars.yaw)*d;</span></span><br><span class="line"><span class="javascript">    p=<span class="built_in">Math</span>.atan2(y,z);</span></span><br><span class="line"><span class="javascript">    d=<span class="built_in">Math</span>.sqrt(y*y+z*z);</span></span><br><span class="line"><span class="javascript">    y=<span class="built_in">Math</span>.sin(p-vars.pitch)*d;</span></span><br><span class="line"><span class="javascript">    z=<span class="built_in">Math</span>.cos(p-vars.pitch)*d;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> rx1=-<span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ry1=<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> rx2=<span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ry2=<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> rx3=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ry3=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> rx4=x;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ry4=z;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> uc=(ry4-ry3)*(rx2-rx1)-(rx4-rx3)*(ry2-ry1);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ua=((rx4-rx3)*(ry1-ry3)-(ry4-ry3)*(rx1-rx3))/uc;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ub=((rx2-rx1)*(ry1-ry3)-(ry2-ry1)*(rx1-rx3))/uc;</span></span><br><span class="line">    if(!z)z=0.000000001;</span><br><span class="line">    if(ua&gt;0&amp;&amp;ua&lt;1&amp;&amp;ub&gt;0&amp;&amp;ub&lt;1)&#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        x:vars.cx+(rx1+ua*(rx2-rx1))*vars.scale,</span><br><span class="line">        y:vars.cy+y/z*vars.scale,</span><br><span class="line">        d:(x*x+y*y+z*z)</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123; <span class="attr">d</span>:-<span class="number">1</span> &#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">elevation</span>(<span class="params">x,y,z</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> dist = <span class="built_in">Math</span>.sqrt(x*x+y*y+z*z);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(dist &amp;&amp; z/dist&gt;=-<span class="number">1</span> &amp;&amp; z/dist &lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">Math</span>.acos(z / dist);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="number">0.00000001</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">rgb</span>(<span class="params">col</span>)</span>&#123;</span></span><br><span class="line">    col += 0.000001;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> r = <span class="built_in">parseInt</span>((<span class="number">0.5</span>+<span class="built_in">Math</span>.sin(col)*<span class="number">0.5</span>)*<span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> g = <span class="built_in">parseInt</span>((<span class="number">0.5</span>+<span class="built_in">Math</span>.cos(col)*<span class="number">0.5</span>)*<span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> b = <span class="built_in">parseInt</span>((<span class="number">0.5</span>-<span class="built_in">Math</span>.sin(col)*<span class="number">0.5</span>)*<span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>+r.toString(<span class="number">16</span>)+g.toString(<span class="number">16</span>)+b.toString(<span class="number">16</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">interpolateColors</span>(<span class="params">RGB1,RGB2,degree</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> w2=degree;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> w1=<span class="number">1</span>-w2;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> [w1*RGB1[<span class="number">0</span>]+w2*RGB2[<span class="number">0</span>],w1*RGB1[<span class="number">1</span>]+w2*RGB2[<span class="number">1</span>],w1*RGB1[<span class="number">2</span>]+w2*RGB2[<span class="number">2</span>]];</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">rgbArray</span>(<span class="params">col</span>)</span>&#123;</span></span><br><span class="line">    col += 0.000001;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> r = <span class="built_in">parseInt</span>((<span class="number">0.5</span>+<span class="built_in">Math</span>.sin(col)*<span class="number">0.5</span>)*<span class="number">256</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> g = <span class="built_in">parseInt</span>((<span class="number">0.5</span>+<span class="built_in">Math</span>.cos(col)*<span class="number">0.5</span>)*<span class="number">256</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> b = <span class="built_in">parseInt</span>((<span class="number">0.5</span>-<span class="built_in">Math</span>.sin(col)*<span class="number">0.5</span>)*<span class="number">256</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> [r, g, b];</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">colorString</span>(<span class="params">arr</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> r = <span class="built_in">parseInt</span>(arr[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> g = <span class="built_in">parseInt</span>(arr[<span class="number">1</span>]);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(arr[<span class="number">2</span>]);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>+(<span class="string">&quot;0&quot;</span> + r.toString(<span class="number">16</span>) ).slice (-<span class="number">2</span>)+(<span class="string">&quot;0&quot;</span> + g.toString(<span class="number">16</span>) ).slice (-<span class="number">2</span>)+(<span class="string">&quot;0&quot;</span> + b.toString(<span class="number">16</span>) ).slice (-<span class="number">2</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">vars</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(vars.points.length&lt;vars.initParticles) <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i) spawnParticle(vars);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p,d,t;</span></span><br><span class="line"><span class="javascript">    p = <span class="built_in">Math</span>.atan2(vars.camX, vars.camZ);</span></span><br><span class="line"><span class="javascript">    d = <span class="built_in">Math</span>.sqrt(vars.camX * vars.camX + vars.camZ * vars.camZ);</span></span><br><span class="line"><span class="javascript">    d -= <span class="built_in">Math</span>.sin(vars.frameNo / <span class="number">80</span>) / <span class="number">25</span>;</span></span><br><span class="line"><span class="javascript">    t = <span class="built_in">Math</span>.cos(vars.frameNo / <span class="number">300</span>) / <span class="number">165</span>;</span></span><br><span class="line"><span class="javascript">    vars.camX = <span class="built_in">Math</span>.sin(p + t) * d;</span></span><br><span class="line"><span class="javascript">    vars.camZ = <span class="built_in">Math</span>.cos(p + t) * d;</span></span><br><span class="line"><span class="javascript">    vars.camY = -<span class="built_in">Math</span>.sin(vars.frameNo / <span class="number">220</span>) * <span class="number">15</span>;</span></span><br><span class="line"><span class="javascript">    vars.yaw = <span class="built_in">Math</span>.PI + p + t;</span></span><br><span class="line"><span class="javascript">    vars.pitch = elevation(vars.camX, vars.camZ, vars.camY) - <span class="built_in">Math</span>.PI / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> t;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;vars.points.length;++i)&#123;</span></span><br><span class="line">      x=vars.points[i].x;</span><br><span class="line">      y=vars.points[i].y;</span><br><span class="line">      z=vars.points[i].z;</span><br><span class="line"><span class="javascript">      d=<span class="built_in">Math</span>.sqrt(x*x+z*z)/<span class="number">1.0075</span>;</span></span><br><span class="line">      t=.1/(1+d*d/5);</span><br><span class="line"><span class="javascript">      p=<span class="built_in">Math</span>.atan2(x,z)+t;</span></span><br><span class="line"><span class="javascript">      vars.points[i].x=<span class="built_in">Math</span>.sin(p)*d;</span></span><br><span class="line"><span class="javascript">      vars.points[i].z=<span class="built_in">Math</span>.cos(p)*d;</span></span><br><span class="line"><span class="javascript">      vars.points[i].y+=vars.points[i].vy*t*((<span class="built_in">Math</span>.sqrt(vars.distributionRadius)-d)*<span class="number">2</span>);</span></span><br><span class="line">      if(vars.points[i].y&gt;vars.vortexHeight/2 || d&lt;.25)&#123;</span><br><span class="line">        vars.points.splice(i,1);</span><br><span class="line">        spawnParticle(vars);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">drawFloor</span>(<span class="params">vars</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> x,y,z,d,point,a;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = -<span class="number">25</span>; i &lt;= <span class="number">25</span>; i += <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> j = -<span class="number">25</span>; j &lt;= <span class="number">25</span>; j += <span class="number">1</span>) &#123;</span></span><br><span class="line">        x = i*2;</span><br><span class="line">        z = j*2;</span><br><span class="line">        y = vars.floor;</span><br><span class="line"><span class="javascript">        d = <span class="built_in">Math</span>.sqrt(x * x + z * z);</span></span><br><span class="line">        point = project3D(x, y-d*d/85, z, vars);</span><br><span class="line">        if (point.d != -1) &#123;</span><br><span class="line">          size = 1 + 15000 / (1 + point.d);</span><br><span class="line"><span class="javascript">          a = <span class="number">0.15</span> - <span class="built_in">Math</span>.pow(d / <span class="number">50</span>, <span class="number">4</span>) * <span class="number">0.15</span>;</span></span><br><span class="line">          if (a &gt; 0) &#123;</span><br><span class="line"><span class="javascript">            vars.ctx.fillStyle = colorString(interpolateColors(rgbArray(d/<span class="number">26</span>-vars.frameNo/<span class="number">40</span>),[<span class="number">0</span>,<span class="number">128</span>,<span class="number">32</span>],<span class="number">.5</span>+<span class="built_in">Math</span>.sin(d/<span class="number">6</span>-vars.frameNo/<span class="number">8</span>)/<span class="number">2</span>));</span></span><br><span class="line">            vars.ctx.globalAlpha = a;</span><br><span class="line">            vars.ctx.fillRect(point.x-size/2,point.y-size/2,size,size);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    vars.ctx.fillStyle = <span class="string">&quot;#82f&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = -<span class="number">25</span>; i &lt;= <span class="number">25</span>; i += <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> j = -<span class="number">25</span>; j &lt;= <span class="number">25</span>; j += <span class="number">1</span>) &#123;</span></span><br><span class="line">        x = i*2;</span><br><span class="line">        z = j*2;</span><br><span class="line">        y = -vars.floor;</span><br><span class="line"><span class="javascript">        d = <span class="built_in">Math</span>.sqrt(x * x + z * z);</span></span><br><span class="line">        point = project3D(x, y+d*d/85, z, vars);</span><br><span class="line">        if (point.d != -1) &#123;</span><br><span class="line">          size = 1 + 15000 / (1 + point.d);</span><br><span class="line"><span class="javascript">          a = <span class="number">0.15</span> - <span class="built_in">Math</span>.pow(d / <span class="number">50</span>, <span class="number">4</span>) * <span class="number">0.15</span>;</span></span><br><span class="line">          if (a &gt; 0) &#123;</span><br><span class="line"><span class="javascript">            vars.ctx.fillStyle = colorString(interpolateColors(rgbArray(-d/<span class="number">26</span>-vars.frameNo/<span class="number">40</span>),[<span class="number">32</span>,<span class="number">0</span>,<span class="number">128</span>],<span class="number">.5</span>+<span class="built_in">Math</span>.sin(-d/<span class="number">6</span>-vars.frameNo/<span class="number">8</span>)/<span class="number">2</span>));</span></span><br><span class="line">            vars.ctx.globalAlpha = a;</span><br><span class="line">            vars.ctx.fillRect(point.x-size/2,point.y-size/2,size,size);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">sortFunction</span>(<span class="params">a,b</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> b.dist-a.dist;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">vars</span>)</span>&#123;</span></span><br><span class="line">    vars.ctx.globalAlpha=.15;</span><br><span class="line"><span class="javascript">    vars.ctx.fillStyle=<span class="string">&quot;#000&quot;</span>;</span></span><br><span class="line">    vars.ctx.fillRect(0, 0, canvas.width, canvas.height);</span><br><span class="line">    drawFloor(vars);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> point,x,y,z,a;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;vars.points.length;++i)&#123;</span></span><br><span class="line">      x=vars.points[i].x;</span><br><span class="line">      y=vars.points[i].y;</span><br><span class="line">      z=vars.points[i].z;</span><br><span class="line">      point=project3D(x,y,z,vars);</span><br><span class="line">      if(point.d != -1)&#123;</span><br><span class="line">        vars.points[i].dist=point.d;</span><br><span class="line">        size=1+vars.points[i].radius/(1+point.d);</span><br><span class="line"><span class="javascript">        d=<span class="built_in">Math</span>.abs(vars.points[i].y);</span></span><br><span class="line"><span class="javascript">        a = <span class="number">.8</span> - <span class="built_in">Math</span>.pow(d / (vars.vortexHeight/<span class="number">2</span>), <span class="number">1000</span>) * <span class="number">.8</span>;</span></span><br><span class="line">        vars.ctx.globalAlpha=a&gt;=0&amp;&amp;a&lt;=1?a:0;</span><br><span class="line">        vars.ctx.fillStyle=rgb(vars.points[i].color);</span><br><span class="line">        if(point.x&gt;-1&amp;&amp;point.x&lt;vars.canvas.width&amp;&amp;point.y&gt;-1&amp;&amp;point.y&lt;vars.canvas.height)vars.ctx.fillRect(point.x-size/2,point.y-size/2,size,size);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vars.points.sort(sortFunction);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">spawnParticle</span>(<span class="params">vars</span>)</span>&#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p,ls;</span></span><br><span class="line">    pt=&#123;&#125;;</span><br><span class="line"><span class="javascript">    p=<span class="built_in">Math</span>.PI*<span class="number">2</span>*<span class="built_in">Math</span>.random();</span></span><br><span class="line"><span class="javascript">    ls=<span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.random()*vars.distributionRadius);</span></span><br><span class="line"><span class="javascript">    pt.x=<span class="built_in">Math</span>.sin(p)*ls;</span></span><br><span class="line">    pt.y=-vars.vortexHeight/2;</span><br><span class="line"><span class="javascript">    pt.vy=vars.initV/<span class="number">20</span>+<span class="built_in">Math</span>.random()*vars.initV;</span></span><br><span class="line"><span class="javascript">    pt.z=<span class="built_in">Math</span>.cos(p)*ls;</span></span><br><span class="line"><span class="javascript">    pt.radius=<span class="number">200</span>+<span class="number">800</span>*<span class="built_in">Math</span>.random();</span></span><br><span class="line">    pt.color=pt.radius/1000+vars.frameNo/250;</span><br><span class="line">    vars.points.push(pt);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">frame</span>(<span class="params">vars</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(vars === <span class="literal">undefined</span>)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> vars=&#123;&#125;;</span></span><br><span class="line"><span class="javascript">      vars.canvas = <span class="built_in">document</span>.querySelector(<span class="string">&quot;canvas&quot;</span>);</span></span><br><span class="line"><span class="javascript">      vars.ctx = vars.canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="javascript">      vars.canvas.width = <span class="built_in">document</span>.body.clientWidth;</span></span><br><span class="line"><span class="javascript">      vars.canvas.height = <span class="built_in">document</span>.body.clientHeight;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        vars.canvas.width = <span class="built_in">document</span>.body.clientWidth;</span></span><br><span class="line"><span class="javascript">        vars.canvas.height = <span class="built_in">document</span>.body.clientHeight;</span></span><br><span class="line">        vars.cx=vars.canvas.width/2;</span><br><span class="line">        vars.cy=vars.canvas.height/2;</span><br><span class="line"><span class="javascript">      &#125;, <span class="literal">true</span>);</span></span><br><span class="line">      vars.frameNo=0;</span><br><span class="line">      </span><br><span class="line">      vars.camX = 0;</span><br><span class="line">      vars.camY = 0;</span><br><span class="line">      vars.camZ = -14;</span><br><span class="line"><span class="javascript">      vars.pitch = elevation(vars.camX, vars.camZ, vars.camY) - <span class="built_in">Math</span>.PI / <span class="number">2</span>;</span></span><br><span class="line">      vars.yaw = 0;</span><br><span class="line">      vars.cx=vars.canvas.width/2;</span><br><span class="line">      vars.cy=vars.canvas.height/2;</span><br><span class="line">      vars.bounding=10;</span><br><span class="line">      vars.scale=500;</span><br><span class="line">      vars.floor=26.5;</span><br><span class="line">      </span><br><span class="line">      vars.points=[];</span><br><span class="line">      vars.initParticles=700;</span><br><span class="line">      vars.initV=.01;</span><br><span class="line">      vars.distributionRadius=800;</span><br><span class="line">      vars.vortexHeight=25;</span><br><span class="line">    &#125;</span><br><span class="line">    vars.frameNo++;</span><br><span class="line"><span class="javascript">    requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      frame(vars);</span><br><span class="line">    &#125;);</span><br><span class="line">    process(vars);</span><br><span class="line">    draw(vars);</span><br><span class="line">  &#125;</span><br><span class="line">  frame();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用方式</strong></p><p>复制以上代码到txt文件，文件名随意，后缀改为html，双击打开。</p><p><strong>转载于:<a href="https://my.oschina.net/lanyu96/blog/2251596">https://my.oschina.net/lanyu96/blog/2251596</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Candy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html5&amp;canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang从入门到放弃00</title>
      <link href="2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/"/>
      <url>2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/</url>
      
        <content type="html"><![CDATA[<h2 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h2><p>Go语言的特点：</p><ol><li>高并发，跨平台。</li><li>有Google作为后盾。</li><li>开发了docker、k8s。</li><li>B站后台使用Go开发，知乎后台由Python转Go，有一些PHP开发的后台使用Go重构。</li></ol><span id="more"></span><h2 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h2><ol><li><p>Go语言的官网：</p><p><a href="https://golang.org/">https://golang.org/</a></p><p>可能因GFW无法访问，可访问以下Go语言中文网：</p><p><a href="https://golang.google.cn/">https://golang.google.cn/</a></p></li><li><p>下载SDK（包含Go语言的标准库，编译运行工具等）</p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217195248923.png" alt="image-20210217195248923" style="zoom:50%;"><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217195746981.png" alt="image-20210217195746981" style="zoom:50%;"></li></ol><ol start="3"><li><p>安装SDK</p><p>下一步安装即可，最好不要安装到C盘，比如安装到E盘</p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217200354293.png" alt="image-20210217200354293" style="zoom:50%;"></li></ol><p>4.配置环境变量（使得Go的指令可在任意路径下使用）</p><p>此电脑-&gt;属性-&gt;高级系统设置</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217200917131.png" alt="image-20210217200917131"></p><p>高级-&gt;环境变量</p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217201041425.png" alt="image-20210217201041425" style="zoom:50%;"><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217201640006.png" alt="image-20210217201640006" style="zoom:50%;"><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217202405329.png" alt="image-20210217202405329" style="zoom:50%;"><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217204802521.png" alt="image-20210217204802521" style="zoom:50%;"><h2 id="二、下载开发工具"><a href="#二、下载开发工具" class="headerlink" title="二、下载开发工具"></a>二、下载开发工具</h2><ol><li><p>vsCode（微软的，免费）</p><p>进入官网下载安装即可<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p></li><li><p>GoLand（推荐，大名鼎鼎的JetBrains公司产品）</p><p>进入官网下载安装即可<a href="https://www.jetbrains.com/go/">https://www.jetbrains.com/go/</a></p></li></ol><h2 id="三、开始HelloWorld（使用Goland开发工具）"><a href="#三、开始HelloWorld（使用Goland开发工具）" class="headerlink" title="三、开始HelloWorld（使用Goland开发工具）"></a>三、开始HelloWorld（使用Goland开发工具）</h2><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217210433405.png" alt="image-20210217210433405" style="zoom:50%;"><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217210705718.png" alt="image-20210217210705718" style="zoom:50%;"><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217211205831.png" alt="image-20210217211205831" style="zoom:50%;"><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217211415395.png" alt="image-20210217211415395"></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217211651855.png" alt="image-20210217211651855"></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217211812029.png" alt="image-20210217211812029"></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217212203814.png" alt="image-20210217212203814"></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217212242267.png" alt="image-20210217212242267"></p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/17/Golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8300/image-20210217212337859.png" alt="image-20210217212337859"></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旅店老板</title>
      <link href="2021/02/16/%E6%97%85%E5%BA%97%E8%80%81%E6%9D%BF/"/>
      <url>2021/02/16/%E6%97%85%E5%BA%97%E8%80%81%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h1><p>只有未成年人才喜欢过年！</p><h1 id="萌芽"><a href="#萌芽" class="headerlink" title="萌芽"></a>萌芽</h1><p>想再听一遍有声小说《地狱公寓》、《无忧旅馆》，在某听书App上搜索，结果发现之前一直免费的作品已开始收费，仍不放弃，试图在浏览器上寻找希望，结果看到某个贴吧有人说同类作品《<a href="https://www.putaoys.com/html/64537.html">轮到你了</a>》<span id="more"></span>不错，然后就开始了一发不可收拾的追剧之路，不对，对于早已完结的作品应该叫补剧。不得不说，剧情不错，配乐还行，直接两个晚上就看完了20集，而且……这之后，我发现《<a href="https://www.putaoys.com/html/64537.html">轮到你了</a>》剧中原班人大多又出演了另一部剧《<a href="https://www.putaoys.com/html/73779.html#juqing">灰姑娘药剂师</a>》感觉不像传说中的浮夸。</p><p><img src= "/img/girl-female.gif" data-lazy-src="/2021/02/16/%E6%97%85%E5%BA%97%E8%80%81%E6%9D%BF/haha.gif" alt="haha"></p><h1 id="凋零"><a href="#凋零" class="headerlink" title="凋零"></a>凋零</h1><p>一星期的春节长假结束了，奔去陌生的城市，继续开始没心没肺地上班…</p>]]></content>
      
      
      <categories>
          
          <category> 影视 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 悬疑推理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
